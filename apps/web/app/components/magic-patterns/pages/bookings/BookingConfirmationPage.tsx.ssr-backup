import React, { useState, createElement } from 'react';
import { CalendarIcon, ShareIcon, MessageSquareIcon, FileTextIcon, SettingsIcon, DownloadIcon, ClipboardCopyIcon, CheckIcon } from 'lucide-react';
import { useNavigate } from 'react-router';
export const BookingConfirmationPage = () => {
  const navigate = useNavigate();
  const [copySuccess, setCopySuccess] = useState(false);
  const [calendarSuccess, setCalendarSuccess] = useState(false);
  const [downloadSuccess, setDownloadSuccess] = useState(false);
  const [messageSuccess, setMessageSuccess] = useState(false);
  // Mock booking data
  const booking = {
    bookingId: 'WTF-B12345',
    eventName: 'Private Event',
    date: new Date(2024, 8, 15, 18, 0),
    endDate: new Date(2024, 8, 15, 23, 0),
    venue: {
      id: 'venue-123',
      name: 'Sunset Terrace',
      address: '123 Beach Drive, Clearwater, FL 33767',
      contact: 'events@sunsetterrace.com',
      phone: '(727) 555-1234'
    },
    attendees: 75,
    status: 'confirmed',
    totalCost: 2500,
    depositPaid: 750,
    balanceDue: 1750,
    balanceDueDate: new Date(2024, 7, 15),
    specialRequests: 'Outdoor setup with dance floor and bar service',
    inclusions: ['Basic sound system', 'Tables and chairs', 'Basic lighting', 'Setup and cleanup', 'Event coordinator']
  };
  // Handle add to calendar
  const handleAddToCalendar = () => {
    // Create calendar event data
    const event = {
      title: `${booking.eventName} at ${booking.venue.name}`,
      start: booking.date,
      end: booking.endDate,
      location: booking.venue.address,
      description: `Booking ID: ${booking.bookingId}\nAttendees: ${booking.attendees}\nSpecial Requests: ${booking.specialRequests}`
    };
    // Create ICS file content
    const startDate = booking.date.toISOString().replace(/-|:|\.\d+/g, '');
    const endDate = booking.endDate.toISOString().replace(/-|:|\.\d+/g, '');
    const icsContent = ['BEGIN:VCALENDAR', 'VERSION:2.0', 'BEGIN:VEVENT', `SUMMARY:${event.title}`, `DTSTART:${startDate}`, `DTEND:${endDate}`, `LOCATION:${event.location}`, `DESCRIPTION:${event.description.replace(/\n/g, '\\n')}`, 'END:VEVENT', 'END:VCALENDAR'].join('\n');
    // Create download link
    const blob = new Blob([icsContent], {
      type: 'text/calendar;charset=utf-8'
    });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `${booking.bookingId}_event.ics`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    // Show success message
    setCalendarSuccess(true);
    setTimeout(() => setCalendarSuccess(false), 3000);
  };
  // Handle share event
  const handleShareEvent = () => {
    // Copy booking link to clipboard
    const bookingUrl = `https://goeventcity.com/bookings/${booking.bookingId}`;
    navigator.clipboard.writeText(bookingUrl);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 2000);
  };
  // Handle message venue
  const handleMessageVenue = () => {
    // In a real app, this would open a messaging interface
    setMessageSuccess(true);
    setTimeout(() => setMessageSuccess(false), 2000);
    setTimeout(() => {
      navigate('/messages');
    }, 1000);
  };
  // Handle view contract
  const handleViewContract = () => {
    // In a real app, this would download the contract PDF
    const contractText = [`BOOKING CONTRACT`, `Booking ID: ${booking.bookingId}`, `Event: ${booking.eventName}`, `Date: ${booking.date.toLocaleDateString()}`, `Time: ${booking.date.toLocaleTimeString()} - ${booking.endDate.toLocaleTimeString()}`, `Venue: ${booking.venue.name}`, `Address: ${booking.venue.address}`, `Attendees: ${booking.attendees}`, `Total Cost: $${booking.totalCost}`, `Deposit Paid: $${booking.depositPaid}`, `Balance Due: $${booking.balanceDue}`, `Balance Due Date: ${booking.balanceDueDate.toLocaleDateString()}`, `Special Requests: ${booking.specialRequests}`, `Inclusions:`, ...booking.inclusions.map(item => `- ${item}`), `\nTerms and Conditions:`, `1. Cancellations must be made 30 days prior to event for full refund.`, `2. Changes to event details must be submitted in writing.`, `3. Damage to venue property is the responsibility of the booking party.`, `4. Final payment is due no later than the balance due date specified above.`].join('\n');
    // Create download link
    const blob = new Blob([contractText], {
      type: 'text/plain;charset=utf-8'
    });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `${booking.bookingId}_contract.txt`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    // Show success message
    setDownloadSuccess(true);
    setTimeout(() => setDownloadSuccess(false), 3000);
  };
  // Handle manage booking
  const handleManageBooking = () => {
    // In a real app, this would navigate to the booking management page
    navigate(`/bookings/manage/${booking.bookingId}`);
  };
  return <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden sticky top-6">
      {/* Success Messages */}
      {calendarSuccess && <div className="fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50 flex items-center">
          <CheckIcon className="h-5 w-5 mr-2" />
          Event added to calendar!
        </div>}
      {downloadSuccess && <div className="fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50 flex items-center">
          <CheckIcon className="h-5 w-5 mr-2" />
          Contract downloaded successfully!
        </div>}
      {messageSuccess && <div className="fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50 flex items-center">
          <CheckIcon className="h-5 w-5 mr-2" />
          Opening messaging interface...
        </div>}
      <div className="px-6 py-5 border-b border-gray-200 bg-gray-50">
        <h2 className="text-lg font-medium text-gray-900">Actions</h2>
      </div>
      <div className="p-6">
        <div className="space-y-4">
          <button onClick={handleAddToCalendar} className="w-full flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            <CalendarIcon className="h-5 w-5 mr-2 text-gray-500" />
            Add to Calendar
          </button>
          <button onClick={handleShareEvent} className="w-full flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            {copySuccess ? <>
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                Link Copied!
              </> : <>
                <ShareIcon className="h-5 w-5 mr-2 text-gray-500" />
                Share Event
              </>}
          </button>
          <button onClick={handleMessageVenue} className="w-full flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            <MessageSquareIcon className="h-5 w-5 mr-2 text-gray-500" />
            Message Venue
          </button>
          <button onClick={handleViewContract} className="w-full flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            <FileTextIcon className="h-5 w-5 mr-2 text-gray-500" />
            View Contract
            <DownloadIcon className="h-4 w-4 ml-2 text-gray-400" />
          </button>
          <button onClick={handleManageBooking} className="w-full flex items-center justify-center px-4 py-3 bg-indigo-600 hover:bg-indigo-700 rounded-md shadow-sm text-sm font-medium text-white">
            <SettingsIcon className="h-5 w-5 mr-2" />
            Manage Booking
          </button>
        </div>
        <div className="mt-6 text-center">
          <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
            <ClipboardCopyIcon className="h-4 w-4" />
            <span>Booking ID: {booking.bookingId}</span>
          </div>
        </div>
      </div>
    </div>;
};