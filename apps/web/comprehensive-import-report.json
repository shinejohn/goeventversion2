{
  "timestamp": "2025-09-03T14:18:40.105Z",
  "availableComponents": [
    [
      "AboutPage",
      {
        "fullPath": "app/components/magic-patterns/pages/AboutPage.tsx",
        "name": "AboutPage",
        "hasDefaultExport": false,
        "hasNamedExport": "AboutPage",
        "type": "pages"
      }
    ],
    [
      "AdvertisePage",
      {
        "fullPath": "app/components/magic-patterns/pages/AdvertisePage.tsx",
        "name": "AdvertisePage",
        "hasDefaultExport": false,
        "hasNamedExport": "AdvertisePage",
        "type": "pages"
      }
    ],
    [
      "AdvertisingSolutionsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/AdvertisingSolutionsPage.tsx",
        "name": "AdvertisingSolutionsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "AdvertisingSolutionsPage",
        "type": "pages"
      }
    ],
    [
      "BookItPage",
      {
        "fullPath": "app/components/magic-patterns/pages/BookItPage.tsx",
        "name": "BookItPage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookItPage",
        "type": "pages"
      }
    ],
    [
      "BookingMarketplacePage",
      {
        "fullPath": "app/components/magic-patterns/pages/BookingMarketplacePage.tsx",
        "name": "BookingMarketplacePage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingMarketplacePage",
        "type": "pages"
      }
    ],
    [
      "CalendarPage",
      {
        "fullPath": "app/components/magic-patterns/pages/CalendarPage.tsx",
        "name": "CalendarPage",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarPage",
        "type": "pages"
      }
    ],
    [
      "CareersPage",
      {
        "fullPath": "app/components/magic-patterns/pages/CareersPage.tsx",
        "name": "CareersPage",
        "hasDefaultExport": false,
        "hasNamedExport": "CareersPage",
        "type": "pages"
      }
    ],
    [
      "CommunityImpactPage",
      {
        "fullPath": "app/components/magic-patterns/pages/CommunityImpactPage.tsx",
        "name": "CommunityImpactPage",
        "hasDefaultExport": false,
        "hasNamedExport": "CommunityImpactPage",
        "type": "pages"
      }
    ],
    [
      "ContactUsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/ContactUsPage.tsx",
        "name": "ContactUsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "ContactUsPage",
        "type": "pages"
      }
    ],
    [
      "EventDetailPage",
      {
        "fullPath": "app/components/magic-patterns/pages/EventDetailPage.tsx",
        "name": "EventDetailPage",
        "hasDefaultExport": false,
        "hasNamedExport": "EventDetailPage",
        "type": "pages"
      }
    ],
    [
      "EventOrganizerHubPage",
      {
        "fullPath": "app/components/magic-patterns/pages/EventOrganizerHubPage.tsx",
        "name": "EventOrganizerHubPage",
        "hasDefaultExport": false,
        "hasNamedExport": "EventOrganizerHubPage",
        "type": "pages"
      }
    ],
    [
      "EventsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/EventsPage.tsx",
        "name": "EventsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "EventsPage",
        "type": "pages"
      }
    ],
    [
      "GearPage",
      {
        "fullPath": "app/components/magic-patterns/pages/GearPage.tsx",
        "name": "GearPage",
        "hasDefaultExport": false,
        "hasNamedExport": "GearPage",
        "type": "pages"
      }
    ],
    [
      "HomePage",
      {
        "fullPath": "app/components/magic-patterns/pages/HomePage.tsx",
        "name": "HomePage",
        "hasDefaultExport": false,
        "hasNamedExport": "HomePage",
        "type": "pages"
      }
    ],
    [
      "HowItWorksPage",
      {
        "fullPath": "app/components/magic-patterns/pages/HowItWorksPage.tsx",
        "name": "HowItWorksPage",
        "hasDefaultExport": false,
        "hasNamedExport": "HowItWorksPage",
        "type": "pages"
      }
    ],
    [
      "ListYourVenuePage",
      {
        "fullPath": "app/components/magic-patterns/pages/ListYourVenuePage.tsx",
        "name": "ListYourVenuePage",
        "hasDefaultExport": false,
        "hasNamedExport": "ListYourVenuePage",
        "type": "pages"
      }
    ],
    [
      "LoginPage",
      {
        "fullPath": "app/components/magic-patterns/pages/LoginPage.tsx",
        "name": "LoginPage",
        "hasDefaultExport": false,
        "hasNamedExport": "LoginPage",
        "type": "pages"
      }
    ],
    [
      "NotFoundPage",
      {
        "fullPath": "app/components/magic-patterns/pages/NotFoundPage.tsx",
        "name": "NotFoundPage",
        "hasDefaultExport": false,
        "hasNamedExport": "NotFoundPage",
        "type": "pages"
      }
    ],
    [
      "PageDirectory",
      {
        "fullPath": "app/components/magic-patterns/pages/PageDirectory.tsx",
        "name": "PageDirectory",
        "hasDefaultExport": false,
        "hasNamedExport": "PageDirectory",
        "type": "pages"
      }
    ],
    [
      "PartnerWithUsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/PartnerWithUsPage.tsx",
        "name": "PartnerWithUsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PartnerWithUsPage",
        "type": "pages"
      }
    ],
    [
      "PerformerToolsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/PerformerToolsPage.tsx",
        "name": "PerformerToolsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerToolsPage",
        "type": "pages"
      }
    ],
    [
      "PerformersPage",
      {
        "fullPath": "app/components/magic-patterns/pages/PerformersPage.tsx",
        "name": "PerformersPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformersPage",
        "type": "pages"
      }
    ],
    [
      "PressMediaPage",
      {
        "fullPath": "app/components/magic-patterns/pages/PressMediaPage.tsx",
        "name": "PressMediaPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PressMediaPage",
        "type": "pages"
      }
    ],
    [
      "SuccessStoriesPage",
      {
        "fullPath": "app/components/magic-patterns/pages/SuccessStoriesPage.tsx",
        "name": "SuccessStoriesPage",
        "hasDefaultExport": false,
        "hasNamedExport": "SuccessStoriesPage",
        "type": "pages"
      }
    ],
    [
      "TicketsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/TicketsPage.tsx",
        "name": "TicketsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketsPage",
        "type": "pages"
      }
    ],
    [
      "VenuesPage",
      {
        "fullPath": "app/components/magic-patterns/pages/VenuesPage.tsx",
        "name": "VenuesPage",
        "hasDefaultExport": false,
        "hasNamedExport": "VenuesPage",
        "type": "pages"
      }
    ],
    [
      "advertise/AdPackagesPage",
      {
        "fullPath": "app/components/magic-patterns/pages/advertise/AdPackagesPage.tsx",
        "name": "AdPackagesPage",
        "hasDefaultExport": false,
        "hasNamedExport": "AdPackagesPage",
        "type": "pages"
      }
    ],
    [
      "advertise/AdvertisingContactPage",
      {
        "fullPath": "app/components/magic-patterns/pages/advertise/AdvertisingContactPage.tsx",
        "name": "AdvertisingContactPage",
        "hasDefaultExport": false,
        "hasNamedExport": "AdvertisingContactPage",
        "type": "pages"
      }
    ],
    [
      "advertise/EmailCampaignsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/advertise/EmailCampaignsPage.tsx",
        "name": "EmailCampaignsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "EmailCampaignsPage",
        "type": "pages"
      }
    ],
    [
      "advertise/EventPromotionPage",
      {
        "fullPath": "app/components/magic-patterns/pages/advertise/EventPromotionPage.tsx",
        "name": "EventPromotionPage",
        "hasDefaultExport": false,
        "hasNamedExport": "EventPromotionPage",
        "type": "pages"
      }
    ],
    [
      "advertise/FeaturedListingsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/advertise/FeaturedListingsPage.tsx",
        "name": "FeaturedListingsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "FeaturedListingsPage",
        "type": "pages"
      }
    ],
    [
      "advertise/HomepageShowcasePage",
      {
        "fullPath": "app/components/magic-patterns/pages/advertise/HomepageShowcasePage.tsx",
        "name": "HomepageShowcasePage",
        "hasDefaultExport": false,
        "hasNamedExport": "HomepageShowcasePage",
        "type": "pages"
      }
    ],
    [
      "auth/EmailVerificationPage",
      {
        "fullPath": "app/components/magic-patterns/pages/auth/EmailVerificationPage.tsx",
        "name": "EmailVerificationPage",
        "hasDefaultExport": false,
        "hasNamedExport": "EmailVerificationPage",
        "type": "pages"
      }
    ],
    [
      "auth/ForgotPasswordPage",
      {
        "fullPath": "app/components/magic-patterns/pages/auth/ForgotPasswordPage.tsx",
        "name": "ForgotPasswordPage",
        "hasDefaultExport": false,
        "hasNamedExport": "ForgotPasswordPage",
        "type": "pages"
      }
    ],
    [
      "auth/RegisterPage",
      {
        "fullPath": "app/components/magic-patterns/pages/auth/RegisterPage.tsx",
        "name": "RegisterPage",
        "hasDefaultExport": false,
        "hasNamedExport": "RegisterPage",
        "type": "pages"
      }
    ],
    [
      "auth/ResetPasswordPage",
      {
        "fullPath": "app/components/magic-patterns/pages/auth/ResetPasswordPage.tsx",
        "name": "ResetPasswordPage",
        "hasDefaultExport": false,
        "hasNamedExport": "ResetPasswordPage",
        "type": "pages"
      }
    ],
    [
      "book/BookPerformerPage",
      {
        "fullPath": "app/components/magic-patterns/pages/book/BookPerformerPage.tsx",
        "name": "BookPerformerPage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookPerformerPage",
        "type": "pages"
      }
    ],
    [
      "book/BookVenuePage",
      {
        "fullPath": "app/components/magic-patterns/pages/book/BookVenuePage.tsx",
        "name": "BookVenuePage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookVenuePage",
        "type": "pages"
      }
    ],
    [
      "book-it/GigCreatorPage",
      {
        "fullPath": "app/components/magic-patterns/pages/book-it/GigCreatorPage.tsx",
        "name": "GigCreatorPage",
        "hasDefaultExport": false,
        "hasNamedExport": "GigCreatorPage",
        "type": "pages"
      }
    ],
    [
      "book-it/GigMarketplacePage",
      {
        "fullPath": "app/components/magic-patterns/pages/book-it/GigMarketplacePage.tsx",
        "name": "GigMarketplacePage",
        "hasDefaultExport": false,
        "hasNamedExport": "GigMarketplacePage",
        "type": "pages"
      }
    ],
    [
      "book-it/GigsMarketplacePage",
      {
        "fullPath": "app/components/magic-patterns/pages/book-it/GigsMarketplacePage.tsx",
        "name": "GigsMarketplacePage",
        "hasDefaultExport": false,
        "hasNamedExport": "GigsMarketplacePage",
        "type": "pages"
      }
    ],
    [
      "book-it/VenueMarketplacePage",
      {
        "fullPath": "app/components/magic-patterns/pages/book-it/VenueMarketplacePage.tsx",
        "name": "VenueMarketplacePage",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueMarketplacePage",
        "type": "pages"
      }
    ],
    [
      "book-it/venues/BookingRequestPage",
      {
        "fullPath": "app/components/magic-patterns/pages/book-it/venues/BookingRequestPage.tsx",
        "name": "BookingRequestPage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingRequestPage",
        "type": "pages"
      }
    ],
    [
      "book-it/venues/VenueDetailPage",
      {
        "fullPath": "app/components/magic-patterns/pages/book-it/venues/VenueDetailPage.tsx",
        "name": "VenueDetailPage",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueDetailPage",
        "type": "pages"
      }
    ],
    [
      "bookings/BookingConfirmationPage",
      {
        "fullPath": "app/components/magic-patterns/pages/bookings/BookingConfirmationPage.tsx",
        "name": "BookingConfirmationPage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingConfirmationPage",
        "type": "pages"
      }
    ],
    [
      "calendar/[id]/edit",
      {
        "fullPath": "app/components/magic-patterns/pages/calendar/[id]/edit.tsx",
        "name": "edit",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "calendar/[slug]",
      {
        "fullPath": "app/components/magic-patterns/pages/calendar/[slug].tsx",
        "name": "[slug]",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "calendars/CalendarMarketplacePage",
      {
        "fullPath": "app/components/magic-patterns/pages/calendars/CalendarMarketplacePage.tsx",
        "name": "CalendarMarketplacePage",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarMarketplacePage",
        "type": "pages"
      }
    ],
    [
      "calendars/create",
      {
        "fullPath": "app/components/magic-patterns/pages/calendars/create.tsx",
        "name": "create",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "checkout/CheckoutConfirmationPage",
      {
        "fullPath": "app/components/magic-patterns/pages/checkout/CheckoutConfirmationPage.tsx",
        "name": "CheckoutConfirmationPage",
        "hasDefaultExport": false,
        "hasNamedExport": "CheckoutConfirmationPage",
        "type": "pages"
      }
    ],
    [
      "checkout/CheckoutDetailsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/checkout/CheckoutDetailsPage.tsx",
        "name": "CheckoutDetailsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "CheckoutDetailsPage",
        "type": "pages"
      }
    ],
    [
      "checkout/CheckoutPaymentPage",
      {
        "fullPath": "app/components/magic-patterns/pages/checkout/CheckoutPaymentPage.tsx",
        "name": "CheckoutPaymentPage",
        "hasDefaultExport": false,
        "hasNamedExport": "CheckoutPaymentPage",
        "type": "pages"
      }
    ],
    [
      "dashboard/calendars",
      {
        "fullPath": "app/components/magic-patterns/pages/dashboard/calendars.tsx",
        "name": "calendars",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarDashboardPage",
        "type": "pages"
      }
    ],
    [
      "events/TicketCreatorPage",
      {
        "fullPath": "app/components/magic-patterns/pages/events/TicketCreatorPage.tsx",
        "name": "TicketCreatorPage",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketCreatorPage",
        "type": "pages"
      }
    ],
    [
      "help",
      {
        "fullPath": "app/components/magic-patterns/pages/help.tsx",
        "name": "help",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/[id]/edit",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[id]/edit.tsx",
        "name": "edit",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/analytics",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/analytics.tsx",
        "name": "analytics",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/articles",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/articles.tsx",
        "name": "articles",
        "hasDefaultExport": false,
        "hasNamedExport": "HubArticlesPage",
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/community",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/community.tsx",
        "name": "community",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/events",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/events.tsx",
        "name": "events",
        "hasDefaultExport": false,
        "hasNamedExport": "HubEventsPage",
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/gallery",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/gallery.tsx",
        "name": "gallery",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/performers",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/performers.tsx",
        "name": "performers",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/[slug]/venues",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/[slug]/venues.tsx",
        "name": "venues",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hub/create",
      {
        "fullPath": "app/components/magic-patterns/pages/hub/create.tsx",
        "name": "create",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "hubs/index",
      {
        "fullPath": "app/components/magic-patterns/pages/hubs/index.tsx",
        "name": "index",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "logout",
      {
        "fullPath": "app/components/magic-patterns/pages/logout.tsx",
        "name": "logout",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "my/FanDashboardPage",
      {
        "fullPath": "app/components/magic-patterns/pages/my/FanDashboardPage.tsx",
        "name": "FanDashboardPage",
        "hasDefaultExport": false,
        "hasNamedExport": "FanDashboardPage",
        "type": "pages"
      }
    ],
    [
      "my/calendar",
      {
        "fullPath": "app/components/magic-patterns/pages/my/calendar.tsx",
        "name": "calendar",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "my/dashboard",
      {
        "fullPath": "app/components/magic-patterns/pages/my/dashboard.tsx",
        "name": "dashboard",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "my/venues",
      {
        "fullPath": "app/components/magic-patterns/pages/my/venues.tsx",
        "name": "venues",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "performers/BookPerformerPage",
      {
        "fullPath": "app/components/magic-patterns/pages/performers/BookPerformerPage.tsx",
        "name": "BookPerformerPage",
        "hasDefaultExport": false,
        "hasNamedExport": "BookPerformerPage",
        "type": "pages"
      }
    ],
    [
      "performers/MarketReportPage",
      {
        "fullPath": "app/components/magic-patterns/pages/performers/MarketReportPage.tsx",
        "name": "MarketReportPage",
        "hasDefaultExport": false,
        "hasNamedExport": "MarketReportPage",
        "type": "pages"
      }
    ],
    [
      "performers/PerformerDiscoveryPage",
      {
        "fullPath": "app/components/magic-patterns/pages/performers/PerformerDiscoveryPage.tsx",
        "name": "PerformerDiscoveryPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerDiscoveryPage",
        "type": "pages"
      }
    ],
    [
      "performers/PerformerManagementPage",
      {
        "fullPath": "app/components/magic-patterns/pages/performers/PerformerManagementPage.tsx",
        "name": "PerformerManagementPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerManagementPage",
        "type": "pages"
      }
    ],
    [
      "performers/PerformerOnboardingPage",
      {
        "fullPath": "app/components/magic-patterns/pages/performers/PerformerOnboardingPage.tsx",
        "name": "PerformerOnboardingPage",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerOnboardingPage",
        "type": "pages"
      }
    ],
    [
      "performers/PerformerProfilePage",
      {
        "fullPath": "app/components/magic-patterns/pages/performers/PerformerProfilePage.tsx",
        "name": "PerformerProfilePage",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerProfilePage",
        "type": "pages"
      }
    ],
    [
      "profile/TicketsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/profile/TicketsPage.tsx",
        "name": "TicketsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketsPage",
        "type": "pages"
      }
    ],
    [
      "profile/UserProfilePage",
      {
        "fullPath": "app/components/magic-patterns/pages/profile/UserProfilePage.tsx",
        "name": "UserProfilePage",
        "hasDefaultExport": false,
        "hasNamedExport": "UserProfilePage",
        "type": "pages"
      }
    ],
    [
      "profile/UserProfileSettingsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/profile/UserProfileSettingsPage.tsx",
        "name": "UserProfileSettingsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "UserProfileSettingsPage",
        "type": "pages"
      }
    ],
    [
      "settings/AccountSettingsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/settings/AccountSettingsPage.tsx",
        "name": "AccountSettingsPage",
        "hasDefaultExport": false,
        "hasNamedExport": "AccountSettingsPage",
        "type": "pages"
      }
    ],
    [
      "social/FeedPage",
      {
        "fullPath": "app/components/magic-patterns/pages/social/FeedPage.tsx",
        "name": "FeedPage",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "social/FriendsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/social/FriendsPage.tsx",
        "name": "FriendsPage",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "social/GroupsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/social/GroupsPage.tsx",
        "name": "GroupsPage",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "social/MessagesPage",
      {
        "fullPath": "app/components/magic-patterns/pages/social/MessagesPage.tsx",
        "name": "MessagesPage",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "social/NotificationsPage",
      {
        "fullPath": "app/components/magic-patterns/pages/social/NotificationsPage.tsx",
        "name": "NotificationsPage",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "social/SocialFeedPage",
      {
        "fullPath": "app/components/magic-patterns/pages/social/SocialFeedPage.tsx",
        "name": "SocialFeedPage",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "success-stories/JazzQuartetPage",
      {
        "fullPath": "app/components/magic-patterns/pages/success-stories/JazzQuartetPage.tsx",
        "name": "JazzQuartetPage",
        "hasDefaultExport": false,
        "hasNamedExport": "JazzQuartetPage",
        "type": "pages"
      }
    ],
    [
      "success-stories/SunsetMusicFestivalPage",
      {
        "fullPath": "app/components/magic-patterns/pages/success-stories/SunsetMusicFestivalPage.tsx",
        "name": "SunsetMusicFestivalPage",
        "hasDefaultExport": false,
        "hasNamedExport": "SunsetMusicFestivalPage",
        "type": "pages"
      }
    ],
    [
      "success-stories/UrbanLoftPage",
      {
        "fullPath": "app/components/magic-patterns/pages/success-stories/UrbanLoftPage.tsx",
        "name": "UrbanLoftPage",
        "hasDefaultExport": false,
        "hasNamedExport": "UrbanLoftPage",
        "type": "pages"
      }
    ],
    [
      "tickets/TicketDetailPage",
      {
        "fullPath": "app/components/magic-patterns/pages/tickets/TicketDetailPage.tsx",
        "name": "TicketDetailPage",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketDetailPage",
        "type": "pages"
      }
    ],
    [
      "tickets/TicketMarketplacePage",
      {
        "fullPath": "app/components/magic-patterns/pages/tickets/TicketMarketplacePage.tsx",
        "name": "TicketMarketplacePage",
        "hasDefaultExport": true,
        "hasNamedExport": "TicketMarketplacePage",
        "type": "pages"
      }
    ],
    [
      "tickets/TicketPurchasePage",
      {
        "fullPath": "app/components/magic-patterns/pages/tickets/TicketPurchasePage.tsx",
        "name": "TicketPurchasePage",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketPurchasePage",
        "type": "pages"
      }
    ],
    [
      "tickets/TicketSelectionPage",
      {
        "fullPath": "app/components/magic-patterns/pages/tickets/TicketSelectionPage.tsx",
        "name": "TicketSelectionPage",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketSelectionPage",
        "type": "pages"
      }
    ],
    [
      "venues/NewVenuesPage",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/NewVenuesPage.tsx",
        "name": "NewVenuesPage",
        "hasDefaultExport": false,
        "hasNamedExport": "NewVenuesPage",
        "type": "pages"
      }
    ],
    [
      "venues/SubmitVenuePage",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/SubmitVenuePage.tsx",
        "name": "SubmitVenuePage",
        "hasDefaultExport": false,
        "hasNamedExport": "SubmitVenuePage",
        "type": "pages"
      }
    ],
    [
      "venues/TrendingVenuesPage",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/TrendingVenuesPage.tsx",
        "name": "TrendingVenuesPage",
        "hasDefaultExport": false,
        "hasNamedExport": "TrendingVenuesPage",
        "type": "pages"
      }
    ],
    [
      "venues/VenueDetailPage",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/VenueDetailPage.tsx",
        "name": "VenueDetailPage",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueDetailPage",
        "type": "pages"
      }
    ],
    [
      "venues/VenueManagementPage",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/VenueManagementPage.tsx",
        "name": "VenueManagementPage",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueManagementPage",
        "type": "pages"
      }
    ],
    [
      "venues/[venueId]/[venueSlug]",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/[venueId]/[venueSlug].tsx",
        "name": "[venueSlug]",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "venues/[venueId]/book",
      {
        "fullPath": "app/components/magic-patterns/pages/venues/[venueId]/book.tsx",
        "name": "book",
        "hasDefaultExport": true,
        "hasNamedExport": null,
        "type": "pages"
      }
    ],
    [
      "ads/MarginEventAds",
      {
        "fullPath": "app/components/magic-patterns/components/ads/MarginEventAds.tsx",
        "name": "MarginEventAds",
        "hasDefaultExport": false,
        "hasNamedExport": "MarginEventAds",
        "type": "components"
      }
    ],
    [
      "booking/ConfirmationStep",
      {
        "fullPath": "app/components/magic-patterns/components/booking/ConfirmationStep.tsx",
        "name": "ConfirmationStep",
        "hasDefaultExport": false,
        "hasNamedExport": "ConfirmationStep",
        "type": "components"
      }
    ],
    [
      "booking/EventDetailsStep",
      {
        "fullPath": "app/components/magic-patterns/components/booking/EventDetailsStep.tsx",
        "name": "EventDetailsStep",
        "hasDefaultExport": false,
        "hasNamedExport": "EventDetailsStep",
        "type": "components"
      }
    ],
    [
      "booking/ProgressIndicator",
      {
        "fullPath": "app/components/magic-patterns/components/booking/ProgressIndicator.tsx",
        "name": "ProgressIndicator",
        "hasDefaultExport": false,
        "hasNamedExport": "ProgressIndicator",
        "type": "components"
      }
    ],
    [
      "booking/RequirementsStep",
      {
        "fullPath": "app/components/magic-patterns/components/booking/RequirementsStep.tsx",
        "name": "RequirementsStep",
        "hasDefaultExport": false,
        "hasNamedExport": "RequirementsStep",
        "type": "components"
      }
    ],
    [
      "booking/ReviewStep",
      {
        "fullPath": "app/components/magic-patterns/components/booking/ReviewStep.tsx",
        "name": "ReviewStep",
        "hasDefaultExport": false,
        "hasNamedExport": "ReviewStep",
        "type": "components"
      }
    ],
    [
      "booking/SubmitStep",
      {
        "fullPath": "app/components/magic-patterns/components/booking/SubmitStep.tsx",
        "name": "SubmitStep",
        "hasDefaultExport": false,
        "hasNamedExport": "SubmitStep",
        "type": "components"
      }
    ],
    [
      "booking-form/BookingConfirmation",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/BookingConfirmation.tsx",
        "name": "BookingConfirmation",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingConfirmation",
        "type": "components"
      }
    ],
    [
      "booking-form/BookingFormProgress",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/BookingFormProgress.tsx",
        "name": "BookingFormProgress",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingFormProgress",
        "type": "components"
      }
    ],
    [
      "booking-form/ContactPaymentForm",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/ContactPaymentForm.tsx",
        "name": "ContactPaymentForm",
        "hasDefaultExport": false,
        "hasNamedExport": "ContactPaymentForm",
        "type": "components"
      }
    ],
    [
      "booking-form/EventDetailsForm",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/EventDetailsForm.tsx",
        "name": "EventDetailsForm",
        "hasDefaultExport": false,
        "hasNamedExport": "EventDetailsForm",
        "type": "components"
      }
    ],
    [
      "booking-form/ReviewSubmitForm",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/ReviewSubmitForm.tsx",
        "name": "ReviewSubmitForm",
        "hasDefaultExport": false,
        "hasNamedExport": "ReviewSubmitForm",
        "type": "components"
      }
    ],
    [
      "booking-form/ServicesAddonsForm",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/ServicesAddonsForm.tsx",
        "name": "ServicesAddonsForm",
        "hasDefaultExport": false,
        "hasNamedExport": "ServicesAddonsForm",
        "type": "components"
      }
    ],
    [
      "booking-form/SpaceSetupForm",
      {
        "fullPath": "app/components/magic-patterns/components/booking-form/SpaceSetupForm.tsx",
        "name": "SpaceSetupForm",
        "hasDefaultExport": false,
        "hasNamedExport": "SpaceSetupForm",
        "type": "components"
      }
    ],
    [
      "bookings/ActionButtons",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/ActionButtons.tsx",
        "name": "ActionButtons",
        "hasDefaultExport": false,
        "hasNamedExport": "ActionButtons",
        "type": "components"
      }
    ],
    [
      "bookings/BookingSummaryCard",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/BookingSummaryCard.tsx",
        "name": "BookingSummaryCard",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingSummaryCard",
        "type": "components"
      }
    ],
    [
      "bookings/ConfettiCelebration",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/ConfettiCelebration.tsx",
        "name": "ConfettiCelebration",
        "hasDefaultExport": false,
        "hasNamedExport": "ConfettiCelebration",
        "type": "components"
      }
    ],
    [
      "bookings/FinancialBreakdown",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/FinancialBreakdown.tsx",
        "name": "FinancialBreakdown",
        "hasDefaultExport": false,
        "hasNamedExport": "FinancialBreakdown",
        "type": "components"
      }
    ],
    [
      "bookings/OrganizerDashboard",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/OrganizerDashboard.tsx",
        "name": "OrganizerDashboard",
        "hasDefaultExport": false,
        "hasNamedExport": "OrganizerDashboard",
        "type": "components"
      }
    ],
    [
      "bookings/VenueInformation",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/VenueInformation.tsx",
        "name": "VenueInformation",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueInformation",
        "type": "components"
      }
    ],
    [
      "bookings/VenueOwnerDashboard",
      {
        "fullPath": "app/components/magic-patterns/components/bookings/VenueOwnerDashboard.tsx",
        "name": "VenueOwnerDashboard",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueOwnerDashboard",
        "type": "components"
      }
    ],
    [
      "calendar/AdvancedFilters",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/AdvancedFilters.tsx",
        "name": "AdvancedFilters",
        "hasDefaultExport": false,
        "hasNamedExport": "AdvancedFilters",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarEngagementBar",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarEngagementBar.tsx",
        "name": "CalendarEngagementBar",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarEngagementBar",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarGrid",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarGrid.tsx",
        "name": "CalendarGrid",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarGrid",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarHeader",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarHeader.tsx",
        "name": "CalendarHeader",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarHeader",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarPreview",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarPreview.tsx",
        "name": "CalendarPreview",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarPreview",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarSidebar",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarSidebar.tsx",
        "name": "CalendarSidebar",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarSidebar",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarTabs",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarTabs.tsx",
        "name": "CalendarTabs",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarTabs",
        "type": "components"
      }
    ],
    [
      "calendar/CalendarWizard",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/CalendarWizard.tsx",
        "name": "CalendarWizard",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarWizard",
        "type": "components"
      }
    ],
    [
      "calendar/EventCard",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/EventCard.tsx",
        "name": "EventCard",
        "hasDefaultExport": false,
        "hasNamedExport": "EventCard",
        "type": "components"
      }
    ],
    [
      "calendar/EventList",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/EventList.tsx",
        "name": "EventList",
        "hasDefaultExport": false,
        "hasNamedExport": "EventList",
        "type": "components"
      }
    ],
    [
      "calendar/QuickFilters",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/QuickFilters.tsx",
        "name": "QuickFilters",
        "hasDefaultExport": false,
        "hasNamedExport": "QuickFilters",
        "type": "components"
      }
    ],
    [
      "calendar/ViewToggle",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/ViewToggle.tsx",
        "name": "ViewToggle",
        "hasDefaultExport": false,
        "hasNamedExport": "ViewToggle",
        "type": "components"
      }
    ],
    [
      "calendar/wizard/AutomationRulesStep",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/wizard/AutomationRulesStep.tsx",
        "name": "AutomationRulesStep",
        "hasDefaultExport": false,
        "hasNamedExport": "AutomationRulesStep",
        "type": "components"
      }
    ],
    [
      "calendar/wizard/BasicInfoStep",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/wizard/BasicInfoStep.tsx",
        "name": "BasicInfoStep",
        "hasDefaultExport": false,
        "hasNamedExport": "BasicInfoStep",
        "type": "components"
      }
    ],
    [
      "calendar/wizard/CustomizationStep",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/wizard/CustomizationStep.tsx",
        "name": "CustomizationStep",
        "hasDefaultExport": false,
        "hasNamedExport": "CustomizationStep",
        "type": "components"
      }
    ],
    [
      "calendar/wizard/MonetizationStep",
      {
        "fullPath": "app/components/magic-patterns/components/calendar/wizard/MonetizationStep.tsx",
        "name": "MonetizationStep",
        "hasDefaultExport": false,
        "hasNamedExport": "MonetizationStep",
        "type": "components"
      }
    ],
    [
      "calendars/CalendarCard",
      {
        "fullPath": "app/components/magic-patterns/components/calendars/CalendarCard.tsx",
        "name": "CalendarCard",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarCard",
        "type": "components"
      }
    ],
    [
      "calendars/CalendarFilters",
      {
        "fullPath": "app/components/magic-patterns/components/calendars/CalendarFilters.tsx",
        "name": "CalendarFilters",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarFilters",
        "type": "components"
      }
    ],
    [
      "calendars/FeaturedCalendars",
      {
        "fullPath": "app/components/magic-patterns/components/calendars/FeaturedCalendars.tsx",
        "name": "FeaturedCalendars",
        "hasDefaultExport": false,
        "hasNamedExport": "FeaturedCalendars",
        "type": "components"
      }
    ],
    [
      "check-in/CheckInButton",
      {
        "fullPath": "app/components/magic-patterns/components/check-in/CheckInButton.tsx",
        "name": "CheckInButton",
        "hasDefaultExport": false,
        "hasNamedExport": "CheckInButton",
        "type": "components"
      }
    ],
    [
      "check-in/CheckInFeed",
      {
        "fullPath": "app/components/magic-patterns/components/check-in/CheckInFeed.tsx",
        "name": "CheckInFeed",
        "hasDefaultExport": false,
        "hasNamedExport": "CheckInFeed",
        "type": "components"
      }
    ],
    [
      "check-in/CheckInModal",
      {
        "fullPath": "app/components/magic-patterns/components/check-in/CheckInModal.tsx",
        "name": "CheckInModal",
        "hasDefaultExport": false,
        "hasNamedExport": "CheckInModal",
        "type": "components"
      }
    ],
    [
      "check-in/PlannedEventsWidget",
      {
        "fullPath": "app/components/magic-patterns/components/check-in/PlannedEventsWidget.tsx",
        "name": "PlannedEventsWidget",
        "hasDefaultExport": false,
        "hasNamedExport": "PlannedEventsWidget",
        "type": "components"
      }
    ],
    [
      "checkout/Invoice",
      {
        "fullPath": "app/components/magic-patterns/components/checkout/Invoice.tsx",
        "name": "Invoice",
        "hasDefaultExport": false,
        "hasNamedExport": "Invoice",
        "type": "components"
      }
    ],
    [
      "dashboard/calendars/AnalyticsOverview",
      {
        "fullPath": "app/components/magic-patterns/components/dashboard/calendars/AnalyticsOverview.tsx",
        "name": "AnalyticsOverview",
        "hasDefaultExport": false,
        "hasNamedExport": "AnalyticsOverview",
        "type": "components"
      }
    ],
    [
      "dashboard/calendars/CalendarGrid",
      {
        "fullPath": "app/components/magic-patterns/components/dashboard/calendars/CalendarGrid.tsx",
        "name": "CalendarGrid",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarGrid",
        "type": "components"
      }
    ],
    [
      "dashboard/calendars/PendingActions",
      {
        "fullPath": "app/components/magic-patterns/components/dashboard/calendars/PendingActions.tsx",
        "name": "PendingActions",
        "hasDefaultExport": false,
        "hasNamedExport": "PendingActions",
        "type": "components"
      }
    ],
    [
      "dashboard/calendars/QuickActionsBar",
      {
        "fullPath": "app/components/magic-patterns/components/dashboard/calendars/QuickActionsBar.tsx",
        "name": "QuickActionsBar",
        "hasDefaultExport": false,
        "hasNamedExport": "QuickActionsBar",
        "type": "components"
      }
    ],
    [
      "directory/MemberDirectory",
      {
        "fullPath": "app/components/magic-patterns/components/directory/MemberDirectory.tsx",
        "name": "MemberDirectory",
        "hasDefaultExport": false,
        "hasNamedExport": "MemberDirectory",
        "type": "components"
      }
    ],
    [
      "events/ContentTabs",
      {
        "fullPath": "app/components/magic-patterns/components/events/ContentTabs.tsx",
        "name": "ContentTabs",
        "hasDefaultExport": false,
        "hasNamedExport": "ContentTabs",
        "type": "components"
      }
    ],
    [
      "events/EventHero",
      {
        "fullPath": "app/components/magic-patterns/components/events/EventHero.tsx",
        "name": "EventHero",
        "hasDefaultExport": false,
        "hasNamedExport": "EventHero",
        "type": "components"
      }
    ],
    [
      "events/EventSuggestionModal",
      {
        "fullPath": "app/components/magic-patterns/components/events/EventSuggestionModal.tsx",
        "name": "EventSuggestionModal",
        "hasDefaultExport": false,
        "hasNamedExport": "EventSuggestionModal",
        "type": "components"
      }
    ],
    [
      "events/RelatedEvents",
      {
        "fullPath": "app/components/magic-patterns/components/events/RelatedEvents.tsx",
        "name": "RelatedEvents",
        "hasDefaultExport": false,
        "hasNamedExport": "RelatedEvents",
        "type": "components"
      }
    ],
    [
      "events/VenueMap",
      {
        "fullPath": "app/components/magic-patterns/components/events/VenueMap.tsx",
        "name": "VenueMap",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueMap",
        "type": "components"
      }
    ],
    [
      "home/DateSelector",
      {
        "fullPath": "app/components/magic-patterns/components/home/DateSelector.tsx",
        "name": "DateSelector",
        "hasDefaultExport": false,
        "hasNamedExport": "DateSelector",
        "type": "components"
      }
    ],
    [
      "hub/analytics/ContentPerformance",
      {
        "fullPath": "app/components/magic-patterns/components/hub/analytics/ContentPerformance.tsx",
        "name": "ContentPerformance",
        "hasDefaultExport": false,
        "hasNamedExport": "ContentPerformance",
        "type": "components"
      }
    ],
    [
      "hub/analytics/ExportTools",
      {
        "fullPath": "app/components/magic-patterns/components/hub/analytics/ExportTools.tsx",
        "name": "ExportTools",
        "hasDefaultExport": false,
        "hasNamedExport": "ExportTools",
        "type": "components"
      }
    ],
    [
      "hub/analytics/MemberInsights",
      {
        "fullPath": "app/components/magic-patterns/components/hub/analytics/MemberInsights.tsx",
        "name": "MemberInsights",
        "hasDefaultExport": false,
        "hasNamedExport": "MemberInsights",
        "type": "components"
      }
    ],
    [
      "hub/analytics/OverviewMetrics",
      {
        "fullPath": "app/components/magic-patterns/components/hub/analytics/OverviewMetrics.tsx",
        "name": "OverviewMetrics",
        "hasDefaultExport": false,
        "hasNamedExport": "OverviewMetrics",
        "type": "components"
      }
    ],
    [
      "hub/analytics/RevenueReports",
      {
        "fullPath": "app/components/magic-patterns/components/hub/analytics/RevenueReports.tsx",
        "name": "RevenueReports",
        "hasDefaultExport": false,
        "hasNamedExport": "RevenueReports",
        "type": "components"
      }
    ],
    [
      "hub/articles/ArticleCard",
      {
        "fullPath": "app/components/magic-patterns/components/hub/articles/ArticleCard.tsx",
        "name": "ArticleCard",
        "hasDefaultExport": false,
        "hasNamedExport": "ArticleCard",
        "type": "components"
      }
    ],
    [
      "hub/articles/ArticleHero",
      {
        "fullPath": "app/components/magic-patterns/components/hub/articles/ArticleHero.tsx",
        "name": "ArticleHero",
        "hasDefaultExport": false,
        "hasNamedExport": "ArticleHero",
        "type": "components"
      }
    ],
    [
      "hub/articles/PopularArticles",
      {
        "fullPath": "app/components/magic-patterns/components/hub/articles/PopularArticles.tsx",
        "name": "PopularArticles",
        "hasDefaultExport": false,
        "hasNamedExport": "PopularArticles",
        "type": "components"
      }
    ],
    [
      "hub/directory/DirectoryCard",
      {
        "fullPath": "app/components/magic-patterns/components/hub/directory/DirectoryCard.tsx",
        "name": "DirectoryCard",
        "hasDefaultExport": false,
        "hasNamedExport": "DirectoryCard",
        "type": "components"
      }
    ],
    [
      "hub/directory/DirectoryFilters",
      {
        "fullPath": "app/components/magic-patterns/components/hub/directory/DirectoryFilters.tsx",
        "name": "DirectoryFilters",
        "hasDefaultExport": false,
        "hasNamedExport": "DirectoryFilters",
        "type": "components"
      }
    ],
    [
      "hub/events/CalendarView",
      {
        "fullPath": "app/components/magic-patterns/components/hub/events/CalendarView.tsx",
        "name": "CalendarView",
        "hasDefaultExport": false,
        "hasNamedExport": "CalendarView",
        "type": "components"
      }
    ],
    [
      "hub/events/EnhancedEventCard",
      {
        "fullPath": "app/components/magic-patterns/components/hub/events/EnhancedEventCard.tsx",
        "name": "EnhancedEventCard",
        "hasDefaultExport": false,
        "hasNamedExport": "EnhancedEventCard",
        "type": "components"
      }
    ],
    [
      "hub/events/EventFilters",
      {
        "fullPath": "app/components/magic-patterns/components/hub/events/EventFilters.tsx",
        "name": "EventFilters",
        "hasDefaultExport": false,
        "hasNamedExport": "EventFilters",
        "type": "components"
      }
    ],
    [
      "hub/events/EventViewToggle",
      {
        "fullPath": "app/components/magic-patterns/components/hub/events/EventViewToggle.tsx",
        "name": "EventViewToggle",
        "hasDefaultExport": false,
        "hasNamedExport": "EventViewToggle",
        "type": "components"
      }
    ],
    [
      "hub/events/ListView",
      {
        "fullPath": "app/components/magic-patterns/components/hub/events/ListView.tsx",
        "name": "ListView",
        "hasDefaultExport": false,
        "hasNamedExport": "ListView",
        "type": "components"
      }
    ],
    [
      "hub/events/MapView",
      {
        "fullPath": "app/components/magic-patterns/components/hub/events/MapView.tsx",
        "name": "MapView",
        "hasDefaultExport": false,
        "hasNamedExport": "MapView",
        "type": "components"
      }
    ],
    [
      "hub/gallery/AlbumsList",
      {
        "fullPath": "app/components/magic-patterns/components/hub/gallery/AlbumsList.tsx",
        "name": "AlbumsList",
        "hasDefaultExport": false,
        "hasNamedExport": "AlbumsList",
        "type": "components"
      }
    ],
    [
      "hub/gallery/MediaCard",
      {
        "fullPath": "app/components/magic-patterns/components/hub/gallery/MediaCard.tsx",
        "name": "MediaCard",
        "hasDefaultExport": false,
        "hasNamedExport": "MediaCard",
        "type": "components"
      }
    ],
    [
      "hub/gallery/MediaGrid",
      {
        "fullPath": "app/components/magic-patterns/components/hub/gallery/MediaGrid.tsx",
        "name": "MediaGrid",
        "hasDefaultExport": false,
        "hasNamedExport": "MediaGrid",
        "type": "components"
      }
    ],
    [
      "hub/gallery/MediaItem",
      {
        "fullPath": "app/components/magic-patterns/components/hub/gallery/MediaItem.tsx",
        "name": "MediaItem",
        "hasDefaultExport": false,
        "hasNamedExport": "MediaItem",
        "type": "components"
      }
    ],
    [
      "hub/gallery/MediaLightbox",
      {
        "fullPath": "app/components/magic-patterns/components/hub/gallery/MediaLightbox.tsx",
        "name": "MediaLightbox",
        "hasDefaultExport": false,
        "hasNamedExport": "MediaLightbox",
        "type": "components"
      }
    ],
    [
      "hub/gallery/MediaUploader",
      {
        "fullPath": "app/components/magic-patterns/components/hub/gallery/MediaUploader.tsx",
        "name": "MediaUploader",
        "hasDefaultExport": false,
        "hasNamedExport": "MediaUploader",
        "type": "components"
      }
    ],
    [
      "hub-builder/DesignCustomizer",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/DesignCustomizer.tsx",
        "name": "DesignCustomizer",
        "hasDefaultExport": false,
        "hasNamedExport": "DesignCustomizer",
        "type": "components"
      }
    ],
    [
      "hub-builder/HubBuilderNav",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/HubBuilderNav.tsx",
        "name": "HubBuilderNav",
        "hasDefaultExport": false,
        "hasNamedExport": "HubBuilderNav",
        "type": "components"
      }
    ],
    [
      "hub-builder/HubPreview",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/HubPreview.tsx",
        "name": "HubPreview",
        "hasDefaultExport": false,
        "hasNamedExport": "HubPreview",
        "type": "components"
      }
    ],
    [
      "hub-builder/MonetizationSetup",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/MonetizationSetup.tsx",
        "name": "MonetizationSetup",
        "hasDefaultExport": false,
        "hasNamedExport": "MonetizationSetup",
        "type": "components"
      }
    ],
    [
      "hub-builder/PermissionsRoles",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/PermissionsRoles.tsx",
        "name": "PermissionsRoles",
        "hasDefaultExport": false,
        "hasNamedExport": "PermissionsRoles",
        "type": "components"
      }
    ],
    [
      "hub-builder/SectionManager",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/SectionManager.tsx",
        "name": "SectionManager",
        "hasDefaultExport": false,
        "hasNamedExport": "SectionManager",
        "type": "components"
      }
    ],
    [
      "hub-builder/SetupWizard",
      {
        "fullPath": "app/components/magic-patterns/components/hub-builder/SetupWizard.tsx",
        "name": "SetupWizard",
        "hasDefaultExport": false,
        "hasNamedExport": "SetupWizard",
        "type": "components"
      }
    ],
    [
      "hubs/CategoriesGrid",
      {
        "fullPath": "app/components/magic-patterns/components/hubs/CategoriesGrid.tsx",
        "name": "CategoriesGrid",
        "hasDefaultExport": false,
        "hasNamedExport": "CategoriesGrid",
        "type": "components"
      }
    ],
    [
      "hubs/HeroSection",
      {
        "fullPath": "app/components/magic-patterns/components/hubs/HeroSection.tsx",
        "name": "HeroSection",
        "hasDefaultExport": false,
        "hasNamedExport": "HeroSection",
        "type": "components"
      }
    ],
    [
      "hubs/HubCard",
      {
        "fullPath": "app/components/magic-patterns/components/hubs/HubCard.tsx",
        "name": "HubCard",
        "hasDefaultExport": false,
        "hasNamedExport": "HubCard",
        "type": "components"
      }
    ],
    [
      "hubs/SearchFilterBar",
      {
        "fullPath": "app/components/magic-patterns/components/hubs/SearchFilterBar.tsx",
        "name": "SearchFilterBar",
        "hasDefaultExport": false,
        "hasNamedExport": "SearchFilterBar",
        "type": "components"
      }
    ],
    [
      "hubs/TrendingTopics",
      {
        "fullPath": "app/components/magic-patterns/components/hubs/TrendingTopics.tsx",
        "name": "TrendingTopics",
        "hasDefaultExport": false,
        "hasNamedExport": "TrendingTopics",
        "type": "components"
      }
    ],
    [
      "layout/Footer",
      {
        "fullPath": "app/components/magic-patterns/components/layout/Footer.tsx",
        "name": "Footer",
        "hasDefaultExport": false,
        "hasNamedExport": "Footer",
        "type": "components"
      }
    ],
    [
      "layout/Header",
      {
        "fullPath": "app/components/magic-patterns/components/layout/Header.tsx",
        "name": "Header",
        "hasDefaultExport": false,
        "hasNamedExport": "Header",
        "type": "components"
      }
    ],
    [
      "layout/MainHeader",
      {
        "fullPath": "app/components/magic-patterns/components/layout/MainHeader.tsx",
        "name": "MainHeader",
        "hasDefaultExport": false,
        "hasNamedExport": "MainHeader",
        "type": "components"
      }
    ],
    [
      "layout/MainHeaderFixed",
      {
        "fullPath": "app/components/magic-patterns/components/layout/MainHeaderFixed.tsx",
        "name": "MainHeaderFixed",
        "hasDefaultExport": false,
        "hasNamedExport": "MainHeaderFixed",
        "type": "components"
      }
    ],
    [
      "layout/SimpleFooter",
      {
        "fullPath": "app/components/magic-patterns/components/layout/SimpleFooter.tsx",
        "name": "SimpleFooter",
        "hasDefaultExport": false,
        "hasNamedExport": "SimpleFooter",
        "type": "components"
      }
    ],
    [
      "layout/SimpleHeader",
      {
        "fullPath": "app/components/magic-patterns/components/layout/SimpleHeader.tsx",
        "name": "SimpleHeader",
        "hasDefaultExport": false,
        "hasNamedExport": "SimpleHeader",
        "type": "components"
      }
    ],
    [
      "navigation/FloatingNav",
      {
        "fullPath": "app/components/magic-patterns/components/navigation/FloatingNav.tsx",
        "name": "FloatingNav",
        "hasDefaultExport": false,
        "hasNamedExport": "FloatingNav",
        "type": "components"
      }
    ],
    [
      "navigation/QuickPageAccess",
      {
        "fullPath": "app/components/magic-patterns/components/navigation/QuickPageAccess.tsx",
        "name": "QuickPageAccess",
        "hasDefaultExport": false,
        "hasNamedExport": "QuickPageAccess",
        "type": "components"
      }
    ],
    [
      "performers/DiscoverySections",
      {
        "fullPath": "app/components/magic-patterns/components/performers/DiscoverySections.tsx",
        "name": "DiscoverySections",
        "hasDefaultExport": false,
        "hasNamedExport": "DiscoverySections",
        "type": "components"
      }
    ],
    [
      "performers/FilterSidebar",
      {
        "fullPath": "app/components/magic-patterns/components/performers/FilterSidebar.tsx",
        "name": "FilterSidebar",
        "hasDefaultExport": false,
        "hasNamedExport": "FilterSidebar",
        "type": "components"
      }
    ],
    [
      "performers/PerformerCalendar",
      {
        "fullPath": "app/components/magic-patterns/components/performers/PerformerCalendar.tsx",
        "name": "PerformerCalendar",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerCalendar",
        "type": "components"
      }
    ],
    [
      "performers/PerformerGrid",
      {
        "fullPath": "app/components/magic-patterns/components/performers/PerformerGrid.tsx",
        "name": "PerformerGrid",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerGrid",
        "type": "components"
      }
    ],
    [
      "performers/PerformerList",
      {
        "fullPath": "app/components/magic-patterns/components/performers/PerformerList.tsx",
        "name": "PerformerList",
        "hasDefaultExport": false,
        "hasNamedExport": "PerformerList",
        "type": "components"
      }
    ],
    [
      "profile/CreateSharedCalendar",
      {
        "fullPath": "app/components/magic-patterns/components/profile/CreateSharedCalendar.tsx",
        "name": "CreateSharedCalendar",
        "hasDefaultExport": false,
        "hasNamedExport": "CreateSharedCalendar",
        "type": "components"
      }
    ],
    [
      "profile/LikedPerformers",
      {
        "fullPath": "app/components/magic-patterns/components/profile/LikedPerformers.tsx",
        "name": "LikedPerformers",
        "hasDefaultExport": false,
        "hasNamedExport": "LikedPerformers",
        "type": "components"
      }
    ],
    [
      "profile/LikedVenues",
      {
        "fullPath": "app/components/magic-patterns/components/profile/LikedVenues.tsx",
        "name": "LikedVenues",
        "hasDefaultExport": false,
        "hasNamedExport": "LikedVenues",
        "type": "components"
      }
    ],
    [
      "profile/PublicCalendar",
      {
        "fullPath": "app/components/magic-patterns/components/profile/PublicCalendar.tsx",
        "name": "PublicCalendar",
        "hasDefaultExport": false,
        "hasNamedExport": "PublicCalendar",
        "type": "components"
      }
    ],
    [
      "profile/SharedCalendars",
      {
        "fullPath": "app/components/magic-patterns/components/profile/SharedCalendars.tsx",
        "name": "SharedCalendars",
        "hasDefaultExport": false,
        "hasNamedExport": "SharedCalendars",
        "type": "components"
      }
    ],
    [
      "profile/UserComments",
      {
        "fullPath": "app/components/magic-patterns/components/profile/UserComments.tsx",
        "name": "UserComments",
        "hasDefaultExport": false,
        "hasNamedExport": "UserComments",
        "type": "components"
      }
    ],
    [
      "settings/AvatarUploader",
      {
        "fullPath": "app/components/magic-patterns/components/settings/AvatarUploader.tsx",
        "name": "AvatarUploader",
        "hasDefaultExport": false,
        "hasNamedExport": "AvatarUploader",
        "type": "components"
      }
    ],
    [
      "settings/NotificationPreferences",
      {
        "fullPath": "app/components/magic-patterns/components/settings/NotificationPreferences.tsx",
        "name": "NotificationPreferences",
        "hasDefaultExport": false,
        "hasNamedExport": "NotificationPreferences",
        "type": "components"
      }
    ],
    [
      "settings/PasswordSecurity",
      {
        "fullPath": "app/components/magic-patterns/components/settings/PasswordSecurity.tsx",
        "name": "PasswordSecurity",
        "hasDefaultExport": false,
        "hasNamedExport": "PasswordSecurity",
        "type": "components"
      }
    ],
    [
      "settings/PrivacySettings",
      {
        "fullPath": "app/components/magic-patterns/components/settings/PrivacySettings.tsx",
        "name": "PrivacySettings",
        "hasDefaultExport": false,
        "hasNamedExport": "PrivacySettings",
        "type": "components"
      }
    ],
    [
      "settings/ProfileInformation",
      {
        "fullPath": "app/components/magic-patterns/components/settings/ProfileInformation.tsx",
        "name": "ProfileInformation",
        "hasDefaultExport": false,
        "hasNamedExport": "ProfileInformation",
        "type": "components"
      }
    ],
    [
      "settings/SettingsSidebar",
      {
        "fullPath": "app/components/magic-patterns/components/settings/SettingsSidebar.tsx",
        "name": "SettingsSidebar",
        "hasDefaultExport": false,
        "hasNamedExport": "SettingsSidebar",
        "type": "components"
      }
    ],
    [
      "sharing/ShareEmbedWidget",
      {
        "fullPath": "app/components/magic-patterns/components/sharing/ShareEmbedWidget.tsx",
        "name": "ShareEmbedWidget",
        "hasDefaultExport": false,
        "hasNamedExport": "ShareEmbedWidget",
        "type": "components"
      }
    ],
    [
      "subscription/SubscriptionModal",
      {
        "fullPath": "app/components/magic-patterns/components/subscription/SubscriptionModal.tsx",
        "name": "SubscriptionModal",
        "hasDefaultExport": false,
        "hasNamedExport": "SubscriptionModal",
        "type": "components"
      }
    ],
    [
      "tickets/TicketPurchaseConfirmation",
      {
        "fullPath": "app/components/magic-patterns/components/tickets/TicketPurchaseConfirmation.tsx",
        "name": "TicketPurchaseConfirmation",
        "hasDefaultExport": false,
        "hasNamedExport": "TicketPurchaseConfirmation",
        "type": "components"
      }
    ],
    [
      "ui/CommunityShowcase",
      {
        "fullPath": "app/components/magic-patterns/components/ui/CommunityShowcase.tsx",
        "name": "CommunityShowcase",
        "hasDefaultExport": false,
        "hasNamedExport": "CommunityShowcase",
        "type": "components"
      }
    ],
    [
      "ui/DialogContext",
      {
        "fullPath": "app/components/magic-patterns/components/ui/DialogContext.tsx",
        "name": "DialogContext",
        "hasDefaultExport": false,
        "hasNamedExport": "useDialog",
        "type": "components"
      }
    ],
    [
      "ui/GlobalSearch",
      {
        "fullPath": "app/components/magic-patterns/components/ui/GlobalSearch.tsx",
        "name": "GlobalSearch",
        "hasDefaultExport": false,
        "hasNamedExport": "GlobalSearch",
        "type": "components"
      }
    ],
    [
      "ui/LocationSelector",
      {
        "fullPath": "app/components/magic-patterns/components/ui/LocationSelector.tsx",
        "name": "LocationSelector",
        "hasDefaultExport": false,
        "hasNamedExport": "LocationSelector",
        "type": "components"
      }
    ],
    [
      "ui/MessageCenter",
      {
        "fullPath": "app/components/magic-patterns/components/ui/MessageCenter.tsx",
        "name": "MessageCenter",
        "hasDefaultExport": false,
        "hasNamedExport": "MessageCenter",
        "type": "components"
      }
    ],
    [
      "ui/NotificationBell",
      {
        "fullPath": "app/components/magic-patterns/components/ui/NotificationBell.tsx",
        "name": "NotificationBell",
        "hasDefaultExport": false,
        "hasNamedExport": "NotificationBell",
        "type": "components"
      }
    ],
    [
      "ui/PasswordInput",
      {
        "fullPath": "app/components/magic-patterns/components/ui/PasswordInput.tsx",
        "name": "PasswordInput",
        "hasDefaultExport": false,
        "hasNamedExport": "PasswordInput",
        "type": "components"
      }
    ],
    [
      "ui/ProfileDropdown",
      {
        "fullPath": "app/components/magic-patterns/components/ui/ProfileDropdown.tsx",
        "name": "ProfileDropdown",
        "hasDefaultExport": false,
        "hasNamedExport": "ProfileDropdown",
        "type": "components"
      }
    ],
    [
      "ui/RememberMeCheckbox",
      {
        "fullPath": "app/components/magic-patterns/components/ui/RememberMeCheckbox.tsx",
        "name": "RememberMeCheckbox",
        "hasDefaultExport": false,
        "hasNamedExport": "RememberMeCheckbox",
        "type": "components"
      }
    ],
    [
      "ui/SharePopup",
      {
        "fullPath": "app/components/magic-patterns/components/ui/SharePopup.tsx",
        "name": "SharePopup",
        "hasDefaultExport": false,
        "hasNamedExport": "SharePopup",
        "type": "components"
      }
    ],
    [
      "ui/SocialLoginButtons",
      {
        "fullPath": "app/components/magic-patterns/components/ui/SocialLoginButtons.tsx",
        "name": "SocialLoginButtons",
        "hasDefaultExport": false,
        "hasNamedExport": "SocialLoginButtons",
        "type": "components"
      }
    ],
    [
      "venue-detail/AmenitiesSection",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/AmenitiesSection.tsx",
        "name": "AmenitiesSection",
        "hasDefaultExport": false,
        "hasNamedExport": "AmenitiesSection",
        "type": "components"
      }
    ],
    [
      "venue-detail/AvailabilityCalendar",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/AvailabilityCalendar.tsx",
        "name": "AvailabilityCalendar",
        "hasDefaultExport": false,
        "hasNamedExport": "AvailabilityCalendar",
        "type": "components"
      }
    ],
    [
      "venue-detail/BookingConfirmationPopup",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/BookingConfirmationPopup.tsx",
        "name": "BookingConfirmationPopup",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingConfirmationPopup",
        "type": "components"
      }
    ],
    [
      "venue-detail/BookingRequestPopup",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/BookingRequestPopup.tsx",
        "name": "BookingRequestPopup",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingRequestPopup",
        "type": "components"
      }
    ],
    [
      "venue-detail/BookingWidget",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/BookingWidget.tsx",
        "name": "BookingWidget",
        "hasDefaultExport": false,
        "hasNamedExport": "BookingWidget",
        "type": "components"
      }
    ],
    [
      "venue-detail/ImageGallery",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/ImageGallery.tsx",
        "name": "ImageGallery",
        "hasDefaultExport": false,
        "hasNamedExport": "ImageGallery",
        "type": "components"
      }
    ],
    [
      "venue-detail/LocationSection",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/LocationSection.tsx",
        "name": "LocationSection",
        "hasDefaultExport": false,
        "hasNamedExport": "LocationSection",
        "type": "components"
      }
    ],
    [
      "venue-detail/PricingSection",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/PricingSection.tsx",
        "name": "PricingSection",
        "hasDefaultExport": false,
        "hasNamedExport": "PricingSection",
        "type": "components"
      }
    ],
    [
      "venue-detail/ReviewsSection",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/ReviewsSection.tsx",
        "name": "ReviewsSection",
        "hasDefaultExport": false,
        "hasNamedExport": "ReviewsSection",
        "type": "components"
      }
    ],
    [
      "venue-detail/SimilarVenues",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/SimilarVenues.tsx",
        "name": "SimilarVenues",
        "hasDefaultExport": false,
        "hasNamedExport": "SimilarVenues",
        "type": "components"
      }
    ],
    [
      "venue-detail/SpaceDetailsSection",
      {
        "fullPath": "app/components/magic-patterns/components/venue-detail/SpaceDetailsSection.tsx",
        "name": "SpaceDetailsSection",
        "hasDefaultExport": false,
        "hasNamedExport": "SpaceDetailsSection",
        "type": "components"
      }
    ],
    [
      "venue-marketplace/FilterSidebar",
      {
        "fullPath": "app/components/magic-patterns/components/venue-marketplace/FilterSidebar.tsx",
        "name": "FilterSidebar",
        "hasDefaultExport": false,
        "hasNamedExport": "FilterSidebar",
        "type": "components"
      }
    ],
    [
      "venue-marketplace/MapView",
      {
        "fullPath": "app/components/magic-patterns/components/venue-marketplace/MapView.tsx",
        "name": "MapView",
        "hasDefaultExport": false,
        "hasNamedExport": "MapView",
        "type": "components"
      }
    ],
    [
      "venue-marketplace/VenueCard",
      {
        "fullPath": "app/components/magic-patterns/components/venue-marketplace/VenueCard.tsx",
        "name": "VenueCard",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueCard",
        "type": "components"
      }
    ],
    [
      "venue-marketplace/VenueListItem",
      {
        "fullPath": "app/components/magic-patterns/components/venue-marketplace/VenueListItem.tsx",
        "name": "VenueListItem",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueListItem",
        "type": "components"
      }
    ],
    [
      "venue-marketplace/VenueMap",
      {
        "fullPath": "app/components/magic-patterns/components/venue-marketplace/VenueMap.tsx",
        "name": "VenueMap",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueMap",
        "type": "components"
      }
    ],
    [
      "venue-profile/VenueBookingWidget",
      {
        "fullPath": "app/components/magic-patterns/components/venue-profile/VenueBookingWidget.tsx",
        "name": "VenueBookingWidget",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueBookingWidget",
        "type": "components"
      }
    ],
    [
      "venue-profile/VenueImageGallery",
      {
        "fullPath": "app/components/magic-patterns/components/venue-profile/VenueImageGallery.tsx",
        "name": "VenueImageGallery",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueImageGallery",
        "type": "components"
      }
    ],
    [
      "venue-profile/VenueSpaceDetails",
      {
        "fullPath": "app/components/magic-patterns/components/venue-profile/VenueSpaceDetails.tsx",
        "name": "VenueSpaceDetails",
        "hasDefaultExport": false,
        "hasNamedExport": "VenueSpaceDetails",
        "type": "components"
      }
    ]
  ],
  "fixes": [
    {
      "type": "component_fix",
      "file": "app/lib/services/data-service.ts",
      "oldImport": "~/components/magic-patterns/mock-data/events",
      "newImport": "~/components/magic-patterns/pages/hub/[slug]/events",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/$.tsx",
      "oldImport": "~/components/magic-patterns/pages/NotFoundPage",
      "newImport": "~/components/magic-patterns/pages/NotFoundPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/about/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/AboutPage",
      "newImport": "~/components/magic-patterns/pages/AboutPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertise/email-campaigns/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/advertise/EmailCampaignsPage",
      "newImport": "~/components/magic-patterns/pages/advertise/EmailCampaignsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertise/event-promotion/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/advertise/EventPromotionPage",
      "newImport": "~/components/magic-patterns/pages/advertise/EventPromotionPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertise/featured-listings/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/advertise/FeaturedListingsPage",
      "newImport": "~/components/magic-patterns/pages/advertise/FeaturedListingsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertise/homepage-showcase/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/advertise/HomepageShowcasePage",
      "newImport": "~/components/magic-patterns/pages/advertise/HomepageShowcasePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertise/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/AdvertisePage",
      "newImport": "~/components/magic-patterns/pages/AdvertisePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertise/packages/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/advertise/AdPackagesPage",
      "newImport": "~/components/magic-patterns/pages/advertise/AdPackagesPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/advertising-solutions/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/AdvertisingSolutionsPage",
      "newImport": "~/components/magic-patterns/pages/AdvertisingSolutionsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book-it/gigs/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/book-it/GigMarketplacePage",
      "newImport": "~/components/magic-patterns/pages/book-it/GigMarketplacePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book-it/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/BookItPage",
      "newImport": "~/components/magic-patterns/pages/BookItPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book-it/venues/$id/book/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/book-it/venues/BookingRequestPage",
      "newImport": "~/components/magic-patterns/pages/book-it/venues/BookingRequestPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book-it/venues/$id/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/book-it/venues/VenueDetailPage",
      "newImport": "~/components/magic-patterns/pages/book-it/venues/VenueDetailPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book-it/venues/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/book-it/VenueMarketplacePage",
      "newImport": "~/components/magic-patterns/pages/book-it/VenueMarketplacePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book.tsx",
      "oldImport": "~/components/magic-patterns/pages/BookItPage",
      "newImport": "~/components/magic-patterns/pages/BookItPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/book/performer.tsx",
      "oldImport": "~/components/magic-patterns/pages/book/BookPerformerPage",
      "newImport": "~/components/magic-patterns/pages/book/BookPerformerPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/bookings/confirmation/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/bookings/BookingConfirmationPage",
      "newImport": "~/components/magic-patterns/pages/bookings/BookingConfirmationPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/bookings/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/BookingMarketplacePage",
      "newImport": "~/components/magic-patterns/pages/BookingMarketplacePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/c.$communitySlug.tsx",
      "oldImport": "~/components/magic-patterns/pages/hub/[slug]/community",
      "newImport": "~/components/magic-patterns/pages/hub/[slug]/community",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/calendars/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/CalendarPage",
      "newImport": "~/components/magic-patterns/pages/CalendarPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/calendars/marketplace.tsx",
      "oldImport": "~/components/magic-patterns/pages/calendars/CalendarMarketplacePage",
      "newImport": "~/components/magic-patterns/pages/calendars/CalendarMarketplacePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/careers/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/CareersPage",
      "newImport": "~/components/magic-patterns/pages/CareersPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/community-impact/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/CommunityImpactPage",
      "newImport": "~/components/magic-patterns/pages/CommunityImpactPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/contact/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/ContactUsPage",
      "newImport": "~/components/magic-patterns/pages/ContactUsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/events.$id.tsx",
      "oldImport": "~/components/magic-patterns/pages/EventDetailPage",
      "newImport": "~/components/magic-patterns/pages/EventDetailPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/events/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/EventsPage",
      "newImport": "~/components/magic-patterns/pages/EventsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/gear/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/GearPage",
      "newImport": "~/components/magic-patterns/pages/GearPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/help/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/help",
      "newImport": "~/components/magic-patterns/pages/help",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/how-it-works/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/HowItWorksPage",
      "newImport": "~/components/magic-patterns/pages/HowItWorksPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/hubs.tsx",
      "oldImport": "~/components/magic-patterns/pages/hubs/index",
      "newImport": "~/components/magic-patterns/pages/hubs/index",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/HomePage",
      "newImport": "~/components/magic-patterns/pages/HomePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/magic-patterns/layout.tsx",
      "oldImport": "~/components/magic-patterns/components/layout/Header",
      "newImport": "~/components/magic-patterns/components/layout/Header",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/magic-patterns/layout.tsx",
      "oldImport": "~/components/magic-patterns/components/layout/Footer",
      "newImport": "~/components/magic-patterns/components/layout/Footer",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/marketing/layout.tsx",
      "oldImport": "~/components/magic-patterns/components/layout/MainHeader",
      "newImport": "~/components/magic-patterns/components/layout/MainHeader",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/marketing/layout.tsx",
      "oldImport": "~/components/magic-patterns/components/layout/Footer",
      "newImport": "~/components/magic-patterns/components/layout/Footer",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/messages/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/social/MessagesPage",
      "newImport": "~/components/magic-patterns/pages/social/MessagesPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/notifications/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/social/NotificationsPage",
      "newImport": "~/components/magic-patterns/pages/social/NotificationsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/partner/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/PartnerWithUsPage",
      "newImport": "~/components/magic-patterns/pages/PartnerWithUsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/performers.$id.tsx",
      "oldImport": "~/components/magic-patterns/pages/performers/PerformerProfilePage",
      "newImport": "~/components/magic-patterns/pages/performers/PerformerProfilePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/performers.tsx",
      "oldImport": "~/components/magic-patterns/pages/PerformersPage",
      "newImport": "~/components/magic-patterns/pages/PerformersPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/press/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/PressMediaPage",
      "newImport": "~/components/magic-patterns/pages/PressMediaPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/social.tsx",
      "oldImport": "~/components/magic-patterns/pages/social/SocialFeedPage",
      "newImport": "~/components/magic-patterns/pages/social/SocialFeedPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/success-stories/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/SuccessStoriesPage",
      "newImport": "~/components/magic-patterns/pages/SuccessStoriesPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/test-magic-ssr.tsx",
      "oldImport": "~/components/magic-patterns/pages/HomePage",
      "newImport": "~/components/magic-patterns/pages/HomePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/tickets/$id/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/tickets/TicketDetailPage",
      "newImport": "~/components/magic-patterns/pages/tickets/TicketDetailPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/tickets/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/TicketsPage",
      "newImport": "~/components/magic-patterns/pages/TicketsPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/tickets/marketplace/index.tsx",
      "oldImport": "~/components/magic-patterns/pages/tickets/TicketMarketplacePage",
      "newImport": "~/components/magic-patterns/pages/tickets/TicketMarketplacePage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/venues.$id.tsx",
      "oldImport": "~/components/magic-patterns/pages/venues/VenueDetailPage",
      "newImport": "~/components/magic-patterns/pages/book-it/venues/VenueDetailPage",
      "reason": "exact_match"
    },
    {
      "type": "component_fix",
      "file": "app/routes/venues.tsx",
      "oldImport": "~/components/magic-patterns/pages/VenuesPage",
      "newImport": "~/components/magic-patterns/pages/VenuesPage",
      "reason": "exact_match"
    },
    {
      "type": "type_remove",
      "file": "app/routes/book/performer.tsx",
      "oldImport": "~/types/app/routes/book/performer/+types",
      "reason": "no_loader_action"
    },
    {
      "type": "type_remove",
      "file": "app/routes/calendars/marketplace.tsx",
      "oldImport": "~/types/app/routes/calendars/marketplace/+types",
      "reason": "no_loader_action"
    },
    {
      "type": "type_regenerate",
      "file": "app/routes/events.$id.tsx",
      "oldImport": "~/types/app/routes/events/$id/+types",
      "reason": "needs_typegen"
    },
    {
      "type": "type_regenerate",
      "file": "app/routes/marketing/contact/index.tsx",
      "oldImport": "~/types/app/routes/marketing/contact/+types",
      "reason": "needs_typegen"
    },
    {
      "type": "type_regenerate",
      "file": "app/routes/performers.$id.tsx",
      "oldImport": "~/types/app/routes/performers/$id/+types",
      "reason": "needs_typegen"
    },
    {
      "type": "type_remove",
      "file": "app/routes/social/messages.tsx",
      "oldImport": "~/types/app/routes/social/messages/+types",
      "reason": "no_loader_action"
    },
    {
      "type": "type_remove",
      "file": "app/routes/social/notifications.tsx",
      "oldImport": "~/types/app/routes/social/notifications/+types",
      "reason": "no_loader_action"
    },
    {
      "type": "type_regenerate",
      "file": "app/routes/test-magic-ssr.tsx",
      "oldImport": "./+types/test-magic-ssr",
      "reason": "needs_typegen"
    },
    {
      "type": "type_remove",
      "file": "app/routes/tickets/buy.tsx",
      "oldImport": "~/types/app/routes/tickets/buy/+types",
      "reason": "no_loader_action"
    }
  ],
  "routeComponents": [
    [
      "$.tsx",
      {
        "filePath": "app/routes/$.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { NotFoundPage } from '~/components/magic-patterns/pages/NotFoundPage'",
            "importPath": "~/components/magic-patterns/pages/NotFoundPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types/$'",
            "importPath": "~/types/app/routes/+types/$"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/+types/$';;\n\nimport { NotFoundPage } from '~/components/magic-patterns/pages/NotFoundPage';\n\nexport const meta = () => {\n  return [\n    {\n      title: 'Page Not Found - GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'The page you are looking for could not be found.',\n    },\n  ];\n};\n\nexport default function NotFoundRoute() {\n  return <NotFoundPage />;\n}"
      }
    ],
    [
      "about/index.tsx",
      {
        "filePath": "app/routes/about/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { AboutPage } from '~/components/magic-patterns/pages/AboutPage'",
            "importPath": "~/components/magic-patterns/pages/AboutPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/about/+types'",
            "importPath": "~/types/app/routes/about/+types"
          }
        ],
        "content": "import { AboutPage } from '~/components/magic-patterns/pages/AboutPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/about/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'About - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function AboutRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <AboutPage />;\n}\n"
      }
    ],
    [
      "admin/accounts/$account.tsx",
      {
        "filePath": "app/routes/admin/accounts/$account.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/admin/accounts/+types/$account'",
            "importPath": "~/types/app/routes/admin/accounts/+types/$account"
          }
        ],
        "content": "import { User } from '@supabase/supabase-js';\n\nimport { z } from 'zod';\n\nimport { getSuperAdminUser } from '@kit/admin';\nimport {\n  banUserAction,\n  deleteAccountAction,\n  deleteUserAction,\n  impersonateUserAction,\n  reactivateUserAction,\n} from '@kit/admin/actions';\nimport { loadAdminAccountPage } from '@kit/admin/api';\nimport { AdminPersonalAccountPage } from '@kit/admin/components/admin-personal-account-page';\nimport { AdminTeamAccountPage } from '@kit/admin/components/admin-team-account-page';\nimport {\n  BanUserSchema,\n  DeleteAccountSchema,\n  DeleteUserSchema,\n  ImpersonateUserSchema,\n  ReactivateUserSchema,\n} from '@kit/admin/schema';\nimport { verifyCsrfToken } from '@kit/csrf/server';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport type { Route } from '~/types/app/routes/admin/accounts/+types/$account';\n\nexport const meta = () => [\n  {\n    title: 'Admin | Account',\n  },\n];\n\nexport const loader = async function (args: Route.LoaderArgs) {\n  const client = getSupabaseServerClient(args.request);\n\n  // admin protected route\n  await getSuperAdminUser(client);\n\n  const account = args.params.account as string;\n\n  return loadAdminAccountPage(client, account);\n};\n\nexport default function AdminPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return data.is_personal_account ? (\n    <AdminPersonalAccountPage\n      user={data.user as User}\n      account={{\n        picture_url: data.account.picture_url ?? '',\n        name: data.account.name ?? '',\n        id: data.account.id ?? '',\n        email: data.account.email ?? '',\n      }}\n      memberships={data.memberships}\n      subscription={data.subscription}\n    />\n  ) : (\n    <AdminTeamAccountPage\n      account={data.account}\n      subscription={data.subscription}\n      members={data.members}\n    />\n  );\n}\n\nconst AdminAccountActions = z.union([\n  BanUserSchema,\n  ImpersonateUserSchema,\n  DeleteAccountSchema,\n  ReactivateUserSchema,\n  DeleteUserSchema,\n]);\n\nexport const action = async function (args: Route.ActionArgs) {\n  const json = await args.request.json();\n  const data = AdminAccountActions.parse(json);\n\n  // verify CSRF token\n  await verifyCsrfToken(args.request, data.payload.csrfToken);\n\n  const client = getSupabaseServerClient(args.request);\n\n  // admin protected route\n  await getSuperAdminUser(client);\n\n  switch (data.intent) {\n    case 'ban-user':\n      return banUserAction({ data, client });\n    case 'impersonate-user':\n      return impersonateUserAction({ data, client });\n    case 'delete-team-account':\n      return deleteAccountAction(data);\n    case 'delete-user':\n      return deleteUserAction({ data, client });\n    case 'reactivate-user':\n      return reactivateUserAction({ data, client });\n    default:\n      throw new Error('Invalid intent');\n  }\n};\n"
      }
    ],
    [
      "admin/accounts/index.tsx",
      {
        "filePath": "app/routes/admin/accounts/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/admin/accounts/+types'",
            "importPath": "~/types/app/routes/admin/accounts/+types"
          }
        ],
        "content": "import { getSuperAdminUser } from '@kit/admin';\nimport {\n  banUserAction,\n  deleteAccountAction,\n  deleteUserAction,\n  impersonateUserAction,\n  reactivateUserAction,\n} from '@kit/admin/actions';\nimport { AdminAccountsTable } from '@kit/admin/components/admin-accounts-table';\nimport { AdminActionsSchema } from '@kit/admin/schema';\nimport { verifyCsrfToken } from '@kit/csrf/server';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport type { Route } from '~/types/app/routes/admin/accounts/+types';\n\nexport const meta = () => [\n  {\n    title: 'Admin | Accounts',\n  },\n];\n\nexport const loader = async function (args: Route.LoaderArgs) {\n  const client = getSupabaseServerClient(args.request);\n\n  // admin protected route\n  await getSuperAdminUser(client);\n\n  const params = new URL(args.request.url).searchParams;\n\n  const page = Number(params.get('page') || '1');\n  const perPage = Number(params.get('perPage') || '10');\n  const query = params.get('query') ?? '';\n\n  const type = (params.get('account_type') ?? 'all') as\n    | 'all'\n    | 'team'\n    | 'personal';\n\n  const startOffset = (page - 1) * perPage;\n  const endOffset = page * perPage;\n\n  let filter = client\n    .from('accounts')\n    .select('*', {\n      count: 'estimated',\n    })\n    .range(startOffset, endOffset)\n    .limit(perPage)\n    .order('created_at', { ascending: false });\n\n  if (query) {\n    filter = filter.or(`name.ilike.%${query}%,email.ilike.%${query}%`);\n  }\n\n  if (type && type !== 'all') {\n    const onlyPersonal = type === 'personal';\n\n    filter = filter.eq('is_personal_account', onlyPersonal);\n  }\n\n  const { data, error, count } = await filter;\n\n  if (error) {\n    throw error;\n  }\n\n  return {\n    data,\n    pageSize: perPage,\n    pageCount: Math.ceil((count ?? 0) / perPage),\n    page,\n    total: count,\n    filters: {\n      type,\n      query,\n    },\n  };\n};\n\nexport default function AdminAccountsPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <>\n      <PageHeader description={<AppBreadcrumbs />} />\n\n      <PageBody>\n        <AdminAccountsTable {...data} />\n      </PageBody>\n    </>\n  );\n}\n\nexport const action = async function (args: Route.ActionArgs) {\n  const json = await args.request.json();\n  const data = AdminActionsSchema.parse(json);\n\n  // verify csrf token\n  await verifyCsrfToken(args.request, data.payload.csrfToken);\n\n  const client = getSupabaseServerClient(args.request);\n\n  // admin protected route\n  await getSuperAdminUser(client);\n\n  switch (data.intent) {\n    case 'ban-user':\n      return banUserAction({ data, client });\n\n    case 'impersonate-user':\n      return impersonateUserAction({ data, client });\n\n    case 'delete-team-account':\n      return deleteAccountAction(data);\n\n    case 'delete-user':\n      return deleteUserAction({ data, client });\n\n    case 'reactivate-user':\n      return reactivateUserAction({ data, client });\n  }\n};\n"
      }
    ],
    [
      "admin/index.tsx",
      {
        "filePath": "app/routes/admin/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/admin/+types'",
            "importPath": "~/types/app/routes/admin/+types"
          }
        ],
        "content": "import { getSuperAdminUser } from '@kit/admin';\nimport { loadAdminDashboard } from '@kit/admin/api';\nimport { AdminDashboard } from '@kit/admin/components/admin-dashboard';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport type { Route } from '~/types/app/routes/admin/+types';\n\nexport const meta = () => [\n  {\n    title: 'Admin | Dashboard',\n  },\n];\n\nexport const loader = async function (args: Route.LoaderArgs) {\n  const client = getSupabaseServerClient(args.request);\n\n  // admin protected route\n  await getSuperAdminUser(client);\n\n  return loadAdminDashboard(client);\n};\n\nexport default function AdminPage(props: Route.ComponentProps) {\n  return (\n    <>\n      <PageHeader description={<AppBreadcrumbs />} />\n\n      <PageBody>\n        <AdminDashboard data={props.loaderData} />\n      </PageBody>\n    </>\n  );\n}\n"
      }
    ],
    [
      "advertise/email-campaigns/index.tsx",
      {
        "filePath": "app/routes/advertise/email-campaigns/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { EmailCampaignsPage } from '~/components/magic-patterns/pages/advertise/EmailCampaignsPage'",
            "importPath": "~/components/magic-patterns/pages/advertise/EmailCampaignsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertise/email-campaigns/+types'",
            "importPath": "~/types/app/routes/advertise/email-campaigns/+types"
          }
        ],
        "content": "import { EmailCampaignsPage } from '~/components/magic-patterns/pages/advertise/EmailCampaignsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertise/email-campaigns/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'EmailCampaigns - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function EmailCampaignsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <EmailCampaignsPage />;\n}\n"
      }
    ],
    [
      "advertise/event-promotion/index.tsx",
      {
        "filePath": "app/routes/advertise/event-promotion/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { EventPromotionPage } from '~/components/magic-patterns/pages/advertise/EventPromotionPage'",
            "importPath": "~/components/magic-patterns/pages/advertise/EventPromotionPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertise/event-promotion/+types'",
            "importPath": "~/types/app/routes/advertise/event-promotion/+types"
          }
        ],
        "content": "import { EventPromotionPage } from '~/components/magic-patterns/pages/advertise/EventPromotionPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertise/event-promotion/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'EventPromotion - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function EventPromotionRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <EventPromotionPage />;\n}\n"
      }
    ],
    [
      "advertise/featured-listings/index.tsx",
      {
        "filePath": "app/routes/advertise/featured-listings/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { FeaturedListingsPage } from '~/components/magic-patterns/pages/advertise/FeaturedListingsPage'",
            "importPath": "~/components/magic-patterns/pages/advertise/FeaturedListingsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertise/featured-listings/+types'",
            "importPath": "~/types/app/routes/advertise/featured-listings/+types"
          }
        ],
        "content": "import { FeaturedListingsPage } from '~/components/magic-patterns/pages/advertise/FeaturedListingsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertise/featured-listings/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'FeaturedListings - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function FeaturedListingsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <FeaturedListingsPage />;\n}\n"
      }
    ],
    [
      "advertise/homepage-showcase/index.tsx",
      {
        "filePath": "app/routes/advertise/homepage-showcase/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { HomepageShowcasePage } from '~/components/magic-patterns/pages/advertise/HomepageShowcasePage'",
            "importPath": "~/components/magic-patterns/pages/advertise/HomepageShowcasePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertise/homepage-showcase/+types'",
            "importPath": "~/types/app/routes/advertise/homepage-showcase/+types"
          }
        ],
        "content": "import { HomepageShowcasePage } from '~/components/magic-patterns/pages/advertise/HomepageShowcasePage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertise/homepage-showcase/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'HomepageShowcase - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function HomepageShowcaseRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <HomepageShowcasePage />;\n}\n"
      }
    ],
    [
      "advertise/index.tsx",
      {
        "filePath": "app/routes/advertise/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { AdvertisePage } from '~/components/magic-patterns/pages/AdvertisePage'",
            "importPath": "~/components/magic-patterns/pages/AdvertisePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertise/+types'",
            "importPath": "~/types/app/routes/advertise/+types"
          }
        ],
        "content": "import { AdvertisePage } from '~/components/magic-patterns/pages/AdvertisePage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertise/+types';\nimport { redirect } from 'react-router';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Advertise - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n  \n  // TODO: Implement form processing logic\n  \n  return { success: true };\n};\n\nexport default function AdvertiseRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <AdvertisePage />;\n}\n"
      }
    ],
    [
      "advertise/packages/index.tsx",
      {
        "filePath": "app/routes/advertise/packages/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { AdPackagesPage } from '~/components/magic-patterns/pages/advertise/AdPackagesPage'",
            "importPath": "~/components/magic-patterns/pages/advertise/AdPackagesPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertise/packages/+types'",
            "importPath": "~/types/app/routes/advertise/packages/+types"
          }
        ],
        "content": "import { AdPackagesPage } from '~/components/magic-patterns/pages/advertise/AdPackagesPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertise/packages/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'AdPackages - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function AdPackagesRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <AdPackagesPage />;\n}\n"
      }
    ],
    [
      "advertising-solutions/index.tsx",
      {
        "filePath": "app/routes/advertising-solutions/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { AdvertisingSolutionsPage } from '~/components/magic-patterns/pages/AdvertisingSolutionsPage'",
            "importPath": "~/components/magic-patterns/pages/AdvertisingSolutionsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/advertising-solutions/+types'",
            "importPath": "~/types/app/routes/advertising-solutions/+types"
          }
        ],
        "content": "import { AdvertisingSolutionsPage } from '~/components/magic-patterns/pages/AdvertisingSolutionsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/advertising-solutions/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'AdvertisingSolutions - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function AdvertisingSolutionsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <AdvertisingSolutionsPage />;\n}\n"
      }
    ],
    [
      "auth/callback-error.tsx",
      {
        "filePath": "app/routes/auth/callback-error.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/callback-error'",
            "importPath": "~/types/app/routes/auth/+types/callback-error"
          }
        ],
        "content": "import { Link, redirect } from 'react-router';\n\nimport { AuthError } from '@supabase/supabase-js';\n\nimport { ResendAuthLinkForm } from '@kit/auth/resend-email-link';\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\nimport { Button } from '@kit/ui/button';\nimport { Trans } from '@kit/ui/trans';\n\nimport pathsConfig from '~/config/paths.config';\nimport type { Route } from '~/types/app/routes/auth/+types/callback-error';\n\nexport const loader = ({ request }: Route.LoaderArgs) => {\n  const searchParams = new URL(request.url).searchParams;\n  const inviteToken = searchParams.get('invite_token');\n  const error = searchParams.get('error');\n  const code = searchParams.get('code');\n  const callback = searchParams.get('callback');\n\n  const signInPath = pathsConfig.auth.signIn;\n  const redirectPath = callback ?? pathsConfig.auth.callback;\n\n  if (!error) {\n    const queryParam = inviteToken ? `?invite_token=${inviteToken}` : '';\n\n    throw redirect(pathsConfig.auth.signIn + queryParam);\n  }\n\n  return {\n    error,\n    signInPath,\n    redirectPath,\n    code,\n  };\n};\n\nexport default function AuthCallbackErrorPage(props: Route.ComponentProps) {\n  const { error, signInPath, redirectPath, code } = props.loaderData;\n\n  return (\n    <div className={'flex flex-col space-y-4 py-4'}>\n      <div>\n        <Alert variant={'destructive'}>\n          <AlertTitle>\n            <Trans i18nKey={'auth:authenticationErrorAlertHeading'} />\n          </AlertTitle>\n\n          <AlertDescription>\n            <Trans i18nKey={error} />\n          </AlertDescription>\n        </Alert>\n      </div>\n\n      <AuthCallbackForm\n        code={code ?? undefined}\n        signInPath={signInPath}\n        redirectPath={redirectPath}\n      />\n    </div>\n  );\n}\n\nfunction AuthCallbackForm(props: {\n  signInPath: string;\n  redirectPath?: string;\n  code?: AuthError['code'];\n}) {\n  switch (props.code) {\n    case 'otp_expired':\n      return <ResendAuthLinkForm redirectPath={props.redirectPath} />;\n    default:\n      return <SignInButton signInPath={props.signInPath} />;\n  }\n}\n\nfunction SignInButton(props: { signInPath: string }) {\n  return (\n    <Button className={'w-full'} asChild>\n      <Link to={props.signInPath}>\n        <Trans i18nKey={'auth:signIn'} />\n      </Link>\n    </Button>\n  );\n}\n"
      }
    ],
    [
      "auth/callback.tsx",
      {
        "filePath": "app/routes/auth/callback.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/callback'",
            "importPath": "~/types/app/routes/auth/+types/callback"
          }
        ],
        "content": "import { redirect } from 'react-router';\n\nimport { createAuthCallbackService } from '@kit/supabase/auth';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport pathsConfig from '~/config/paths.config';\nimport type { Route } from '~/types/app/routes/auth/+types/callback';\n\nexport async function loader({ request }: Route.LoaderArgs) {\n  const service = createAuthCallbackService(getSupabaseServerClient(request));\n\n  const { nextPath } = await service.exchangeCodeForSession(request, {\n    joinTeamPath: pathsConfig.app.joinTeam,\n    redirectPath: pathsConfig.app.home,\n  });\n\n  return redirect(nextPath, {\n    headers: request.headers,\n  });\n}\n"
      }
    ],
    [
      "auth/confirm.tsx",
      {
        "filePath": "app/routes/auth/confirm.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/confirm'",
            "importPath": "~/types/app/routes/auth/+types/confirm"
          }
        ],
        "content": "import { redirect } from 'react-router';\n\nimport { createAuthCallbackService } from '@kit/supabase/auth';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport pathsConfig from '~/config/paths.config';\nimport type { Route } from '~/types/app/routes/auth/+types/confirm';\n\nexport async function loader({ request }: Route.LoaderArgs) {\n  const service = createAuthCallbackService(getSupabaseServerClient(request));\n\n  const url = await service.verifyTokenHash(request, {\n    joinTeamPath: pathsConfig.app.joinTeam,\n    redirectPath: pathsConfig.app.home,\n  });\n\n  return redirect(url.href, {\n    headers: request.headers,\n  });\n}\n"
      }
    ],
    [
      "auth/password-reset.tsx",
      {
        "filePath": "app/routes/auth/password-reset.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/password-reset'",
            "importPath": "~/types/app/routes/auth/+types/password-reset"
          }
        ],
        "content": "import { Link, redirect } from 'react-router';\n\nimport { PasswordResetRequestContainer } from '@kit/auth/password-reset';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { Button } from '@kit/ui/button';\nimport { Heading } from '@kit/ui/heading';\nimport { Trans } from '@kit/ui/trans';\n\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/auth/+types/password-reset';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(request);\n  const user = await requireUser(getSupabaseServerClient(request));\n\n  if (user.data) {\n    throw redirect(pathsConfig.app.home);\n  }\n\n  return {\n    title: i18n.t('auth:passwordResetLabel'),\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nconst { callback, passwordUpdate, signIn } = pathsConfig.auth;\nconst redirectPath = `${callback}?next=${passwordUpdate}`;\n\nexport default function PasswordResetPage() {\n  return (\n    <>\n      <Heading level={5} className={'tracking-tight'}>\n        <Trans i18nKey={'auth:passwordResetLabel'} />\n      </Heading>\n\n      <div className={'flex flex-col space-y-4'}>\n        <PasswordResetRequestContainer redirectPath={redirectPath} />\n\n        <div className={'flex justify-center text-xs'}>\n          <Button asChild variant={'link'} size={'sm'}>\n            <Link to={signIn}>\n              <Trans i18nKey={'auth:passwordRecoveredQuestion'} />\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n"
      }
    ],
    [
      "auth/sign-in.tsx",
      {
        "filePath": "app/routes/auth/sign-in.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/sign-in'",
            "importPath": "~/types/app/routes/auth/+types/sign-in"
          }
        ],
        "content": "import React, { useState } from 'react';\nimport { Link, redirect } from 'react-router';\n\nimport { SignInMethodsContainer } from '@kit/auth/sign-in';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport authConfig from '~/config/auth.config';\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/auth/+types/sign-in';\n\n// Inline Magic Patterns components\nconst SocialLoginButtons = () => {\n  return (\n    <div className=\"grid grid-cols-1 gap-3\">\n      <button className=\"w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\">\n        <svg className=\"h-5 w-5\" viewBox=\"0 0 24 24\">\n          <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n          <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n          <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n          <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n        </svg>\n        <span className=\"ml-2\">Continue with Google</span>\n      </button>\n    </div>\n  );\n};\n\nconst PasswordInput = ({ value, onChange }: any) => {\n  const [showPassword, setShowPassword] = useState(false);\n  \n  return (\n    <div className=\"relative\">\n      <input\n        type={showPassword ? 'text' : 'password'}\n        value={value}\n        onChange={onChange}\n        className=\"appearance-none rounded-md relative block w-full px-3 py-2 pr-10 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n        placeholder=\"Password\"\n        required\n      />\n      <button\n        type=\"button\"\n        className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n        onClick={() => setShowPassword(!showPassword)}\n      >\n        {showPassword ? (\n          <svg className=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n          </svg>\n        ) : (\n          <svg className=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            <path d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n          </svg>\n        )}\n      </button>\n    </div>\n  );\n};\n\nconst RememberMeCheckbox = ({ checked, onChange }: any) => {\n  return (\n    <div className=\"flex items-center\">\n      <input\n        id=\"remember-me\"\n        name=\"remember-me\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={onChange}\n        className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n      />\n      <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900\">\n        Remember me\n      </label>\n    </div>\n  );\n};\n\nconst CommunityShowcase = () => {\n  return (\n    <div className=\"absolute inset-0 flex flex-col justify-center items-center text-white p-8\">\n      <div className=\"max-w-lg text-center\">\n        <h3 className=\"text-3xl font-bold mb-4\">Join the Community</h3>\n        <p className=\"text-lg mb-8 text-indigo-100\">\n          Discover amazing events, connect with performers, and find the perfect venues in your city.\n        </p>\n        <div className=\"grid grid-cols-2 gap-4 mb-8\">\n          <div className=\"bg-white/10 rounded-lg p-4\">\n            <div className=\"text-2xl font-bold\">10K+</div>\n            <div className=\"text-sm\">Events</div>\n          </div>\n          <div className=\"bg-white/10 rounded-lg p-4\">\n            <div className=\"text-2xl font-bold\">5K+</div>\n            <div className=\"text-sm\">Venues</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(request);\n  const client = getSupabaseServerClient(request);\n  const { data: user } = await requireUser(client);\n\n  if (user) {\n    throw redirect(pathsConfig.app.home);\n  }\n\n  const searchParams = new URL(request.url).searchParams;\n  const inviteToken = searchParams.get('invite_token') ?? undefined;\n  const returnPath = searchParams.get('next') ?? pathsConfig.app.home;\n\n  return {\n    title: 'Sign In - GoEventCity',\n    inviteToken,\n    returnPath,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const email = formData.get('email') as string;\n  const password = formData.get('password') as string;\n  \n  // TODO: Implement authentication logic\n  // const supabase = getSupabaseServerClient(request);\n  // const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n  \n  return { success: true };\n};\n\nexport default function SignInPage(props: Route.ComponentProps) {\n  const { inviteToken, returnPath } = props.loaderData;\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isBusinessLogin, setIsBusinessLogin] = useState(false);\n\n  const signUpPath =\n    pathsConfig.auth.signUp +\n    (inviteToken ? `?invite_token=${inviteToken}` : '');\n\n  const paths = {\n    callback: pathsConfig.auth.callback,\n    joinTeam: pathsConfig.app.joinTeam,\n    returnPath,\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log({\n      email,\n      password,\n      rememberMe,\n      isBusinessLogin\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col md:flex-row bg-white\">\n      {/* Left Side - Community Showcase */}\n      <div className=\"hidden md:block md:w-1/2 bg-indigo-700 relative\">\n        <CommunityShowcase />\n      </div>\n      \n      {/* Right Side - Login Form */}\n      <div className=\"w-full md:w-1/2 flex items-center justify-center px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n              Welcome Back\n            </h2>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              {isBusinessLogin ? 'Login to your business account' : \"Discover what's happening in your community\"}\n            </p>\n          </div>\n          \n          <SocialLoginButtons />\n          \n          <div className=\"mt-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-white text-gray-500\">\n                  Or continue with existing auth\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Use existing Supabase auth for now */}\n          <div className=\"mt-8\">\n            <SignInMethodsContainer\n              inviteToken={inviteToken}\n              paths={paths}\n              providers={authConfig.providers}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm\">\n              <Link to={signUpPath} className=\"font-medium text-indigo-600 hover:text-indigo-500\">\n                New here? Sign up\n              </Link>\n            </div>\n            <button \n              type=\"button\" \n              className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\n              onClick={() => setIsBusinessLogin(!isBusinessLogin)}\n            >\n              {isBusinessLogin ? 'Login as a regular user' : 'Login as a business'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "auth/sign-up.tsx",
      {
        "filePath": "app/routes/auth/sign-up.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/sign-up'",
            "importPath": "~/types/app/routes/auth/+types/sign-up"
          }
        ],
        "content": "import React, { useState } from 'react';\nimport { Link, redirect } from 'react-router';\n\nimport { SignUpMethodsContainer } from '@kit/auth/sign-up';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport authConfig from '~/config/auth.config';\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/auth/+types/sign-up';\nimport { UserIcon, BuildingIcon, MusicIcon, CheckIcon, CalendarIcon, TicketIcon, UsersIcon } from 'lucide-react';\nimport { redirect } from 'react-router';\n\n// Inline Magic Patterns components\nconst SocialLoginButtons = ({ signUp = false }: { signUp?: boolean }) => {\n  return (\n    <div className=\"grid grid-cols-1 gap-3\">\n      <button className=\"w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\">\n        <svg className=\"h-5 w-5\" viewBox=\"0 0 24 24\">\n          <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n          <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n          <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n          <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n        </svg>\n        <span className=\"ml-2\">{signUp ? 'Sign up with Google' : 'Continue with Google'}</span>\n      </button>\n    </div>\n  );\n};\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(request);\n\n  const inviteToken =\n    new URL(request.url).searchParams.get('invite_token') ?? '';\n\n  const user = await requireUser(getSupabaseServerClient(request));\n\n  if (user.data) {\n    throw redirect(pathsConfig.app.home);\n  }\n\n  return {\n    title: 'Sign Up - GoEventCity',\n    inviteToken,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nconst paths = {\n  callback: pathsConfig.auth.callback,\n  appHome: pathsConfig.app.home,\n};\n\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const email = formData.get('email') as string;\n  const password = formData.get('password') as string;\n  \n  // TODO: Implement authentication logic\n  // const supabase = getSupabaseServerClient(request);\n  // const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n  \n  return { success: true };\n};\n\nexport default function SignUpPage(props: Route.ComponentProps) {\n  const { inviteToken } = props.loaderData;\n  const [accountType, setAccountType] = useState<'fan' | 'venue' | 'performer'>('fan');\n\n  const signInPath =\n    pathsConfig.auth.signIn +\n    (inviteToken ? `?invite_token=${inviteToken}` : '');\n\n  return (\n    <div className=\"min-h-screen flex flex-col md:flex-row bg-white\">\n      {/* Left Side - Register Form */}\n      <div className=\"w-full md:w-1/2 flex items-center justify-center px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n              Create Your Account\n            </h2>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              Join the community and discover local events\n            </p>\n          </div>\n          \n          {/* Account Type Selection */}\n          <div className=\"flex justify-center space-x-4 mb-6\">\n            <button \n              type=\"button\" \n              onClick={() => setAccountType('fan')} \n              className={`flex flex-col items-center p-3 rounded-lg ${accountType === 'fan' ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-500' : 'bg-gray-100 text-gray-700 border-2 border-transparent'}`}\n            >\n              <UserIcon className=\"h-6 w-6 mb-1\" />\n              <span className=\"text-sm font-medium\">Fan</span>\n            </button>\n            <button \n              type=\"button\" \n              onClick={() => setAccountType('venue')} \n              className={`flex flex-col items-center p-3 rounded-lg ${accountType === 'venue' ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-500' : 'bg-gray-100 text-gray-700 border-2 border-transparent'}`}\n            >\n              <BuildingIcon className=\"h-6 w-6 mb-1\" />\n              <span className=\"text-sm font-medium\">Venue</span>\n            </button>\n            <button \n              type=\"button\" \n              onClick={() => setAccountType('performer')} \n              className={`flex flex-col items-center p-3 rounded-lg ${accountType === 'performer' ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-500' : 'bg-gray-100 text-gray-700 border-2 border-transparent'}`}\n            >\n              <MusicIcon className=\"h-6 w-6 mb-1\" />\n              <span className=\"text-sm font-medium\">Performer</span>\n            </button>\n          </div>\n          \n          <SocialLoginButtons signUp={true} />\n          \n          <div className=\"mt-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-white text-gray-500\">\n                  Or continue with existing auth\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Use existing Supabase auth */}\n          <div className=\"mt-8\">\n            <SignUpMethodsContainer\n              providers={authConfig.providers}\n              displayTermsCheckbox={authConfig.displayTermsCheckbox}\n              inviteToken={inviteToken}\n              paths={paths}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-sm\">\n              <Link to={signInPath} className=\"font-medium text-indigo-600 hover:text-indigo-500\">\n                Already have an account? Sign in\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Right Side - Benefits */}\n      <div className=\"hidden md:block md:w-1/2 bg-indigo-700 relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-indigo-600 to-purple-700 opacity-90\"></div>\n        <div className=\"relative z-10 flex flex-col justify-center items-center h-full text-white p-8\">\n          <h2 className=\"text-3xl font-bold mb-6\">Join the Community</h2>\n          <div className=\"max-w-md space-y-6\">\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 bg-opacity-30\">\n                  <CalendarIcon className=\"h-6 w-6\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <h3 className=\"text-xl font-medium\">Discover Local Events</h3>\n                <p className=\"mt-2\">\n                  Find concerts, performances, and activities happening in your area.\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 bg-opacity-30\">\n                  <TicketIcon className=\"h-6 w-6\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <h3 className=\"text-xl font-medium\">Easy Ticketing</h3>\n                <p className=\"mt-2\">\n                  Purchase tickets securely and manage all your bookings in one place.\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 bg-opacity-30\">\n                  <UsersIcon className=\"h-6 w-6\" />\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <h3 className=\"text-xl font-medium\">Connect with Others</h3>\n                <p className=\"mt-2\">\n                  Follow your favorite venues and performers, and connect with other fans.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "auth/verify.tsx",
      {
        "filePath": "app/routes/auth/verify.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/auth/+types/verify'",
            "importPath": "~/types/app/routes/auth/+types/verify"
          }
        ],
        "content": "import { redirect } from 'react-router';\n\nimport { MultiFactorChallengeContainer } from '@kit/auth/mfa';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/auth/+types/verify';\nimport { checkRequiresMultiFactorAuthentication } from '@kit/supabase/check-requires-mfa';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const client = getSupabaseServerClient(request);\n\n  const {\n    data,\n    error,\n  } = await client.auth.getClaims();\n\n  if (error || !data?.claims) {\n    throw redirect(pathsConfig.auth.signIn);\n  }\n\n  const needsMfa = await checkRequiresMultiFactorAuthentication(client);\n\n  if (!needsMfa) {\n    throw redirect(pathsConfig.auth.signIn);\n  }\n\n  const i18n = await createI18nServerInstance(request);\n  const searchParams = new URL(request.url).searchParams;\n  const redirectPath = searchParams.get('next') ?? pathsConfig.app.home;\n\n  return {\n    title: i18n.t('auth:signIn'),\n    redirectPath,\n    userId: data.claims.sub,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport default function VerifyPage(props: Route.ComponentProps) {\n  const { redirectPath, userId } = props.loaderData;\n\n  return (\n    <MultiFactorChallengeContainer\n      userId={userId}\n      paths={{\n        redirectPath,\n      }}\n    />\n  );\n}\n"
      }
    ],
    [
      "book/performer.tsx",
      {
        "filePath": "app/routes/book/performer.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { BookPerformerPage } from '~/components/magic-patterns/pages/book/BookPerformerPage'",
            "importPath": "~/components/magic-patterns/pages/book/BookPerformerPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/book/performer/+types'",
            "importPath": "~/types/app/routes/book/performer/+types"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/book/performer/+types';;\n\nimport { BookPerformerPage } from '~/components/magic-patterns/pages/book/BookPerformerPage';\n\nexport default function BookPerformerRoute() {\n  return <BookPerformerPage />;\n}"
      }
    ],
    [
      "book-it/gigs/index.tsx",
      {
        "filePath": "app/routes/book-it/gigs/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { GigMarketplacePage } from '~/components/magic-patterns/pages/book-it/GigMarketplacePage'",
            "importPath": "~/components/magic-patterns/pages/book-it/GigMarketplacePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/book-it/gigs/+types'",
            "importPath": "~/types/app/routes/book-it/gigs/+types"
          }
        ],
        "content": "import { GigMarketplacePage } from '~/components/magic-patterns/pages/book-it/GigMarketplacePage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/book-it/gigs/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'GigMarketplace - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function GigMarketplaceRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <GigMarketplacePage />;\n}\n"
      }
    ],
    [
      "book-it/index.tsx",
      {
        "filePath": "app/routes/book-it/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { BookItPage } from '~/components/magic-patterns/pages/BookItPage'",
            "importPath": "~/components/magic-patterns/pages/BookItPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/book-it/+types'",
            "importPath": "~/types/app/routes/book-it/+types"
          }
        ],
        "content": "import { BookItPage } from '~/components/magic-patterns/pages/BookItPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/book-it/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'BookIt - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function BookItRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <BookItPage />;\n}\n"
      }
    ],
    [
      "book-it/venues/$id/book/index.tsx",
      {
        "filePath": "app/routes/book-it/venues/$id/book/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { BookingRequestPage } from '~/components/magic-patterns/pages/book-it/venues/BookingRequestPage'",
            "importPath": "~/components/magic-patterns/pages/book-it/venues/BookingRequestPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/book-it/venues/$id/book/+types'",
            "importPath": "~/types/app/routes/book-it/venues/$id/book/+types"
          }
        ],
        "content": "import { BookingRequestPage } from '~/components/magic-patterns/pages/book-it/venues/BookingRequestPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/book-it/venues/$id/book/+types';\nimport { redirect } from 'react-router';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'BookingRequest - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n  \n  // TODO: Implement booking logic\n  // const supabase = getSupabaseServerClient(request);\n  // const { data: booking, error } = await supabase.from('bookings').insert(data);\n  \n  return redirect('/bookings/confirmation');\n};\n\nexport default function BookingRequestRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <BookingRequestPage />;\n}\n"
      }
    ],
    [
      "book-it/venues/$id/index.tsx",
      {
        "filePath": "app/routes/book-it/venues/$id/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { VenueDetailPage } from '~/components/magic-patterns/pages/book-it/venues/VenueDetailPage'",
            "importPath": "~/components/magic-patterns/pages/book-it/venues/VenueDetailPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/book-it/venues/$id/+types'",
            "importPath": "~/types/app/routes/book-it/venues/$id/+types"
          }
        ],
        "content": "import { VenueDetailPage } from '~/components/magic-patterns/pages/book-it/venues/VenueDetailPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/book-it/venues/$id/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'VenueDetail - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function VenueDetailRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <VenueDetailPage />;\n}\n"
      }
    ],
    [
      "book-it/venues/index.tsx",
      {
        "filePath": "app/routes/book-it/venues/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { VenueMarketplacePage } from '~/components/magic-patterns/pages/book-it/VenueMarketplacePage'",
            "importPath": "~/components/magic-patterns/pages/book-it/VenueMarketplacePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/book-it/venues/+types'",
            "importPath": "~/types/app/routes/book-it/venues/+types"
          }
        ],
        "content": "import { VenueMarketplacePage } from '~/components/magic-patterns/pages/book-it/VenueMarketplacePage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/book-it/venues/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'VenueMarketplace - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function VenueMarketplaceRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <VenueMarketplacePage />;\n}\n"
      }
    ],
    [
      "book.tsx",
      {
        "filePath": "app/routes/book.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { BookItPage } from '~/components/magic-patterns/pages/BookItPage'",
            "importPath": "~/components/magic-patterns/pages/BookItPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types/book'",
            "importPath": "~/types/app/routes/+types/book"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/+types/book';;\n\nimport { BookItPage } from '~/components/magic-patterns/pages/BookItPage';\n\nexport default function BookRoute() {\n  return <BookItPage />;\n}"
      }
    ],
    [
      "bookings/confirmation/index.tsx",
      {
        "filePath": "app/routes/bookings/confirmation/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { BookingConfirmationPage } from '~/components/magic-patterns/pages/bookings/BookingConfirmationPage'",
            "importPath": "~/components/magic-patterns/pages/bookings/BookingConfirmationPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/bookings/confirmation/+types'",
            "importPath": "~/types/app/routes/bookings/confirmation/+types"
          }
        ],
        "content": "import { BookingConfirmationPage } from '~/components/magic-patterns/pages/bookings/BookingConfirmationPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/bookings/confirmation/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'BookingConfirmation - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function BookingConfirmationRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <BookingConfirmationPage />;\n}\n"
      }
    ],
    [
      "bookings/index.tsx",
      {
        "filePath": "app/routes/bookings/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { BookingMarketplacePage } from '~/components/magic-patterns/pages/BookingMarketplacePage'",
            "importPath": "~/components/magic-patterns/pages/BookingMarketplacePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/bookings/+types'",
            "importPath": "~/types/app/routes/bookings/+types"
          }
        ],
        "content": "import { BookingMarketplacePage } from '~/components/magic-patterns/pages/BookingMarketplacePage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/bookings/+types';\nimport { redirect } from 'react-router';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'BookingMarketplace - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n  \n  // TODO: Implement booking logic\n  // const supabase = getSupabaseServerClient(request);\n  // const { data: booking, error } = await supabase.from('bookings').insert(data);\n  \n  return redirect('/bookings/confirmation');\n};\n\nexport default function BookingMarketplaceRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <BookingMarketplacePage />;\n}\n"
      }
    ],
    [
      "c.$communitySlug.tsx",
      {
        "filePath": "app/routes/c.$communitySlug.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import HubCommunityPage from '~/components/magic-patterns/pages/hub/[slug]/community'",
            "importPath": "~/components/magic-patterns/pages/hub/[slug]/community"
          }
        ],
        "typeImports": [],
        "content": "import { useParams } from 'react-router';\n\n// Use the existing Magic Patterns hub community page with mock data\nimport HubCommunityPage from '~/components/magic-patterns/pages/hub/[slug]/community';\n\nexport default function CommunityCalendarPage() {\n  return <HubCommunityPage />;\n}"
      }
    ],
    [
      "calendars/index.tsx",
      {
        "filePath": "app/routes/calendars/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { CalendarPage } from '~/components/magic-patterns/pages/CalendarPage'",
            "importPath": "~/components/magic-patterns/pages/CalendarPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/calendars/+types'",
            "importPath": "~/types/app/routes/calendars/+types"
          }
        ],
        "content": "import { CalendarPage } from '~/components/magic-patterns/pages/CalendarPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/calendars/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Calendar - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function CalendarRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <CalendarPage />;\n}\n"
      }
    ],
    [
      "calendars/marketplace.tsx",
      {
        "filePath": "app/routes/calendars/marketplace.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import CalendarMarketplacePage from '~/components/magic-patterns/pages/calendars/CalendarMarketplacePage'",
            "importPath": "~/components/magic-patterns/pages/calendars/CalendarMarketplacePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/calendars/marketplace/+types'",
            "importPath": "~/types/app/routes/calendars/marketplace/+types"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/calendars/marketplace/+types';;\n\nimport CalendarMarketplacePage from '~/components/magic-patterns/pages/calendars/CalendarMarketplacePage';\n\nexport default function CalendarMarketplaceRoute() {\n  return <CalendarMarketplacePage />;\n}"
      }
    ],
    [
      "careers/index.tsx",
      {
        "filePath": "app/routes/careers/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { CareersPage } from '~/components/magic-patterns/pages/CareersPage'",
            "importPath": "~/components/magic-patterns/pages/CareersPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/careers/+types'",
            "importPath": "~/types/app/routes/careers/+types"
          }
        ],
        "content": "import { CareersPage } from '~/components/magic-patterns/pages/CareersPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/careers/+types';\nimport { redirect } from 'react-router';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Careers - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n  \n  // TODO: Implement form processing logic\n  \n  return { success: true };\n};\n\nexport default function CareersRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <CareersPage />;\n}\n"
      }
    ],
    [
      "community-impact/index.tsx",
      {
        "filePath": "app/routes/community-impact/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { CommunityImpactPage } from '~/components/magic-patterns/pages/CommunityImpactPage'",
            "importPath": "~/components/magic-patterns/pages/CommunityImpactPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/community-impact/+types'",
            "importPath": "~/types/app/routes/community-impact/+types"
          }
        ],
        "content": "import { CommunityImpactPage } from '~/components/magic-patterns/pages/CommunityImpactPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/community-impact/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'CommunityImpact - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function CommunityImpactRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <CommunityImpactPage />;\n}\n"
      }
    ],
    [
      "contact/index.tsx",
      {
        "filePath": "app/routes/contact/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { ContactUsPage } from '~/components/magic-patterns/pages/ContactUsPage'",
            "importPath": "~/components/magic-patterns/pages/ContactUsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/contact/+types'",
            "importPath": "~/types/app/routes/contact/+types"
          }
        ],
        "content": "import { ContactUsPage } from '~/components/magic-patterns/pages/ContactUsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/contact/+types';\nimport { redirect } from 'react-router';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'ContactUs - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const name = formData.get('name') as string;\n  const email = formData.get('email') as string;\n  const message = formData.get('message') as string;\n  \n  // TODO: Implement contact form submission\n  // Send email or save to database\n  \n  return { success: true, message: 'Thank you for contacting us!' };\n};\n\nexport default function ContactUsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <ContactUsPage />;\n}\n"
      }
    ],
    [
      "events/index.tsx",
      {
        "filePath": "app/routes/events/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { EventsPage } from '~/components/magic-patterns/pages/EventsPage'",
            "importPath": "~/components/magic-patterns/pages/EventsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/events/+types'",
            "importPath": "~/types/app/routes/events/+types"
          }
        ],
        "content": "import { EventsPage } from '~/components/magic-patterns/pages/EventsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/events/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(request);\n  \n  // For now, we'll return null and let EventsPage use its mock data\n  // Later, we'll fetch real events from Supabase like this:\n  /*\n  const client = getSupabaseServerClient(request);\n  const { data: events } = await client\n    .from('events')\n    .select('*')\n    .order('date', { ascending: true });\n  */\n  \n  return {\n    title: 'Events - GoEventCity',\n    events: null, // Let EventsPage use its own mock data for now\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events happening in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function Events(props: Route.ComponentProps) {\n  // Access loader data through props (SSR-safe)\n  const { events } = props.loaderData;\n  \n  // EventsPage doesn't accept props yet, so it will use its own mock data\n  return <EventsPage />;\n}"
      }
    ],
    [
      "events.$id.tsx",
      {
        "filePath": "app/routes/events.$id.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { EventDetailPage } from '~/components/magic-patterns/pages/EventDetailPage'",
            "importPath": "~/components/magic-patterns/pages/EventDetailPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/events/$id/+types'",
            "importPath": "~/types/app/routes/events/$id/+types"
          }
        ],
        "content": "import { EventDetailPage } from '~/components/magic-patterns/pages/EventDetailPage';\nimport type { Route } from '~/types/app/routes/events/$id/+types';\n\nexport const loader = async ({ params }: Route.LoaderArgs) => {\n  return {\n    eventId: params.id,\n    title: `Event Details - GoEventCity`,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'View detailed information about this event',\n    },\n  ];\n};\n\nexport default function EventDetailRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <EventDetailPage eventId={data.eventId} />;\n}"
      }
    ],
    [
      "gear/index.tsx",
      {
        "filePath": "app/routes/gear/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { GearPage } from '~/components/magic-patterns/pages/GearPage'",
            "importPath": "~/components/magic-patterns/pages/GearPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/gear/+types'",
            "importPath": "~/types/app/routes/gear/+types"
          }
        ],
        "content": "import { GearPage } from '~/components/magic-patterns/pages/GearPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/gear/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Gear - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function GearRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <GearPage />;\n}\n"
      }
    ],
    [
      "help/index.tsx",
      {
        "filePath": "app/routes/help/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { HelpPage } from '~/components/magic-patterns/pages/help'",
            "importPath": "~/components/magic-patterns/pages/help"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/help/+types'",
            "importPath": "~/types/app/routes/help/+types"
          }
        ],
        "content": "import { HelpPage } from '~/components/magic-patterns/pages/help';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/help/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'help - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function helpRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <HelpPage />;\n}\n"
      }
    ],
    [
      "home/account/billing-return.tsx",
      {
        "filePath": "app/routes/home/account/billing-return.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types/billing-return'",
            "importPath": "~/types/app/routes/home/account/+types/billing-return"
          }
        ],
        "content": "import { lazy } from 'react';\n\nimport { redirect } from 'react-router';\n\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { BillingSessionStatus } from '@kit/billing-gateway/components';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport billingConfig from '~/config/billing.config';\nimport { Database } from '~/lib/database.types';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/home/account/+types/billing-return';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport async function loader(args: Route.LoaderArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const i18n = await createI18nServerInstance(args.request);\n\n  const searchParams = new URL(args.request.url).searchParams;\n  const title = i18n.t('teams:billing.pageTitle');\n\n  const sessionId = searchParams.get('session_id');\n\n  if (!sessionId) {\n    throw redirect('../billing');\n  }\n\n  const { customerEmail, checkoutToken } = await loadCheckoutSession(\n    client,\n    sessionId,\n  );\n\n  return {\n    title,\n    customerEmail,\n    checkoutToken,\n  };\n}\n\nconst LazyEmbeddedCheckout = lazy(async () => {\n  const { EmbeddedCheckout } = await import('@kit/billing-gateway/checkout');\n\n  return {\n    default: EmbeddedCheckout,\n  };\n});\n\nexport default function ReturnCheckoutSessionPage(props: Route.ComponentProps) {\n  const { checkoutToken, customerEmail } = props.loaderData;\n\n  if (checkoutToken) {\n    return (\n      <LazyEmbeddedCheckout\n        checkoutToken={checkoutToken}\n        provider={billingConfig.provider}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className={'fixed left-0 top-48 z-50 mx-auto w-full'}>\n        <BillingSessionStatus\n          redirectPath={'../'}\n          customerEmail={customerEmail ?? ''}\n        />\n      </div>\n\n      <BlurryBackdrop />\n    </>\n  );\n}\n\nfunction BlurryBackdrop() {\n  return (\n    <div\n      className={\n        'bg-background/30 fixed left-0 top-0 w-full backdrop-blur-sm' +\n        ' !m-0 h-full'\n      }\n    />\n  );\n}\n\nasync function loadCheckoutSession(\n  client: SupabaseClient<Database>,\n  sessionId: string,\n) {\n  const { error } = await requireUser(client);\n\n  if (error) {\n    throw new Error('Authentication required');\n  }\n\n  const gateway = await getBillingGatewayProvider(client);\n\n  const session = await gateway.retrieveCheckoutSession({\n    sessionId,\n  });\n\n  if (!session) {\n    throw redirect('../billing');\n  }\n\n  const checkoutToken = session.isSessionOpen ? session.checkoutToken : null;\n\n  // otherwise - we show the user the return page\n  // and display the details of the session\n  return {\n    status: session.status,\n    customerEmail: session.customer.email,\n    checkoutToken,\n  };\n}\n"
      }
    ],
    [
      "home/account/billing.tsx",
      {
        "filePath": "app/routes/home/account/billing.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types/billing'",
            "importPath": "~/types/app/routes/home/account/+types/billing"
          }
        ],
        "content": "import { useMemo } from 'react';\n\nimport { useFetcher } from 'react-router';\n\nimport { ExclamationTriangleIcon } from '@radix-ui/react-icons';\n\nimport {\n  BillingPortalCard,\n  CurrentLifetimeOrderCard,\n  CurrentSubscriptionCard,\n} from '@kit/billing-gateway/components';\nimport { useCsrfToken } from '@kit/csrf/client';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { If } from '@kit/ui/if';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\nimport { cn } from '@kit/ui/utils';\n\nimport billingConfig from '~/config/billing.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { requireUserLoader } from '~/lib/require-user-loader';\nimport type { Route } from '~/types/app/routes/home/account/+types/billing';\n\nimport { TeamAccountCheckoutForm } from './_components/team-account-checkout-form';\nimport { TeamAccountLayoutPageHeader } from './_components/team-account-layout-page-header';\nimport { loadTeamAccountBillingPage } from './_lib/load-team-account-billing-page.server';\nimport { loadTeamWorkspace } from './_lib/team-account-workspace-loader.server';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport async function loader(args: Route.LoaderArgs) {\n  await requireUserLoader(args.request);\n\n  const client = getSupabaseServerClient(args.request);\n  const accountSlug = args.params.account as string;\n\n  const i18n = await createI18nServerInstance(args.request);\n  const title = i18n.t('teams:billing.pageTitle');\n\n  const workspace = await loadTeamWorkspace({\n    client,\n    accountSlug,\n  });\n\n  const accountId = workspace.account.id;\n\n  const [data, customerId] = await loadTeamAccountBillingPage({\n    client,\n    accountId,\n  });\n\n  return {\n    title,\n    data,\n    customerId,\n    accountId,\n    workspace,\n    accountSlug,\n  };\n}\n\nexport default function TeamAccountBillingPage(props: Route.ComponentProps) {\n  const { data, workspace, customerId, accountId, accountSlug } =\n    props.loaderData;\n\n  const canManageBilling =\n    workspace.account.permissions.includes('billing.manage');\n\n  const fetcher = useFetcher();\n  const csrfToken = useCsrfToken();\n\n  const Checkout = useMemo(() => {\n    if (!canManageBilling) {\n      return <CannotManageBillingAlert />;\n    }\n\n    return (\n      <TeamAccountCheckoutForm\n        customerId={customerId}\n        accountId={accountId}\n        accountSlug={accountSlug}\n      />\n    );\n  }, [accountId, accountSlug, canManageBilling, customerId]);\n\n  const BillingPortal = useMemo(() => {\n    if (!canManageBilling || !customerId) {\n      return null;\n    }\n\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n\n          return fetcher.submit(\n            {\n              intent: 'account-billing-portal',\n              payload: {\n                accountId,\n                slug: accountSlug,\n                csrfToken,\n              },\n            },\n            {\n              action: '/api/billing/customer-portal',\n              method: 'POST',\n              encType: 'application/json',\n            },\n          );\n        }}\n      >\n        <BillingPortalCard />\n      </form>\n    );\n  }, [\n    accountId,\n    accountSlug,\n    canManageBilling,\n    customerId,\n    fetcher,\n    csrfToken,\n  ]);\n\n  return (\n    <>\n      <TeamAccountLayoutPageHeader\n        account={accountSlug}\n        title={<Trans i18nKey={'common:billingTabLabel'} />}\n        description={<AppBreadcrumbs />}\n      />\n\n      <PageBody>\n        <div\n          className={cn(`flex w-full flex-col space-y-4`, {\n            'max-w-2xl': data,\n          })}\n        >\n          <If condition={data} fallback={<div>{Checkout}</div>}>\n            {(data) => {\n              if ('active' in data) {\n                return (\n                  <CurrentSubscriptionCard\n                    subscription={data}\n                    config={billingConfig}\n                  />\n                );\n              }\n\n              return (\n                <CurrentLifetimeOrderCard order={data} config={billingConfig} />\n              );\n            }}\n          </If>\n\n          {BillingPortal}\n        </div>\n      </PageBody>\n    </>\n  );\n}\n\nfunction CannotManageBillingAlert() {\n  return (\n    <Alert variant={'warning'}>\n      <ExclamationTriangleIcon className={'h-4'} />\n\n      <AlertTitle>\n        <Trans i18nKey={'billing:cannotManageBillingAlertTitle'} />\n      </AlertTitle>\n\n      <AlertDescription>\n        <Trans i18nKey={'billing:cannotManageBillingAlertDescription'} />\n      </AlertDescription>\n    </Alert>\n  );\n}\n"
      }
    ],
    [
      "home/account/index.tsx",
      {
        "filePath": "app/routes/home/account/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types'",
            "importPath": "~/types/app/routes/home/account/+types"
          }
        ],
        "content": "import { lazy } from 'react';\n\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { ClientOnly } from '@kit/ui/client-only';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/home/account/+types';\n\nimport { TeamAccountLayoutPageHeader } from './_components/team-account-layout-page-header';\n\nconst DashboardDemo = lazy(\n  () => import('../account/_components/dashboard-demo'),\n);\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(args.request);\n\n  const account = args.params.account as string;\n  const title = i18n.t('teams:home.pageTitle');\n\n  return {\n    title,\n    account,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport default function TeamAccountHomePage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <>\n      <TeamAccountLayoutPageHeader\n        account={data.account}\n        title={<Trans i18nKey={'common:dashboardTabLabel'} />}\n        description={<AppBreadcrumbs />}\n      />\n\n      <PageBody>\n        <ClientOnly>\n          <DashboardDemo />\n        </ClientOnly>\n      </PageBody>\n    </>\n  );\n}\n"
      }
    ],
    [
      "home/account/layout.tsx",
      {
        "filePath": "app/routes/home/account/layout.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types/layout'",
            "importPath": "~/types/app/routes/home/account/+types/layout"
          }
        ],
        "content": "import { Outlet } from 'react-router';\n\nimport { z } from 'zod';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport {\n  Page,\n  PageLayoutStyle,\n  PageMobileNavigation,\n  PageNavigation,\n} from '@kit/ui/page';\nimport { SidebarProvider } from '@kit/ui/shadcn-sidebar';\n\nimport { AppLogo } from '~/components/app-logo';\nimport { getTeamAccountSidebarConfig } from '~/config/team-account-navigation.config';\nimport { layoutStyleCookie, sidebarStateCookie } from '~/lib/cookies';\nimport type { Route } from '~/types/app/routes/home/account/+types/layout';\n\nimport { TeamAccountLayoutMobileNavigation } from './_components/team-account-layout-mobile-navigation';\nimport { TeamAccountLayoutSidebar } from './_components/team-account-layout-sidebar';\nimport { TeamAccountNavigationMenu } from './_components/team-account-navigation-menu';\nimport { loadTeamWorkspace } from './_lib/team-account-workspace-loader.server';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const accountSlug = args.params.account as string;\n\n  const client = getSupabaseServerClient(args.request);\n  const layoutState = await getLayoutState(args.request, accountSlug);\n\n  const workspace = await loadTeamWorkspace({\n    accountSlug,\n    client,\n  });\n\n  return {\n    workspace,\n    layoutState,\n    accountSlug,\n  };\n};\n\nexport default function TeamWorkspaceLayout(props: Route.ComponentProps) {\n  const { layoutState } = props.loaderData;\n\n  if (layoutState.style === 'sidebar') {\n    return (\n      <SidebarLayout {...props}>\n        <Outlet />\n      </SidebarLayout>\n    );\n  }\n\n  return <HeaderLayout {...props}>{<Outlet />}</HeaderLayout>;\n}\n\nfunction SidebarLayout(props: React.PropsWithChildren<Route.ComponentProps>) {\n  const { workspace, layoutState, accountSlug } = props.loaderData;\n\n  const accounts = workspace.accounts.map(({ name, slug, picture_url }) => ({\n    label: name,\n    value: slug,\n    image: picture_url,\n  }));\n\n  const account = workspace.account;\n  const user = workspace.user;\n\n  return (\n    <SidebarProvider defaultOpen={layoutState.open}>\n      <Page style={'sidebar'}>\n        <PageNavigation>\n          <TeamAccountLayoutSidebar\n            account={accountSlug}\n            accountId={account.id}\n            accounts={accounts}\n            user={user}\n          />\n        </PageNavigation>\n\n        <PageMobileNavigation className={'flex items-center justify-between'}>\n          <AppLogo />\n\n          <div className={'flex space-x-4'}>\n            <TeamAccountLayoutMobileNavigation\n              userId={user.id}\n              accounts={accounts}\n              account={accountSlug}\n            />\n          </div>\n        </PageMobileNavigation>\n\n        {props.children}\n      </Page>\n    </SidebarProvider>\n  );\n}\n\nfunction HeaderLayout(props: React.PropsWithChildren<Route.ComponentProps>) {\n  const { workspace, accountSlug } = props.loaderData;\n\n  const accounts = workspace.accounts.map(({ name, slug, picture_url }) => ({\n    label: name,\n    value: slug,\n    image: picture_url,\n  }));\n\n  return (\n    <Page style={'header'}>\n      <PageNavigation>\n        <TeamAccountNavigationMenu workspace={workspace} />\n      </PageNavigation>\n\n      <PageMobileNavigation className={'flex items-center justify-between'}>\n        <AppLogo />\n\n        <div className={'group-data-[mobile:hidden]'}>\n          <TeamAccountLayoutMobileNavigation\n            userId={workspace.user.id}\n            accounts={accounts}\n            account={accountSlug}\n          />\n        </div>\n      </PageMobileNavigation>\n\n      {props.children}\n    </Page>\n  );\n}\n\nasync function getLayoutState(request: Request, account: string) {\n  const cookieHeader = request.headers.get('cookie');\n  const sidebarOpenCookie = await sidebarStateCookie.parse(cookieHeader);\n  const layoutCookie = await layoutStyleCookie.parse(cookieHeader);\n  const layoutStyle = layoutCookie as PageLayoutStyle;\n  const config = getTeamAccountSidebarConfig(account);\n\n  const sidebarOpenCookieValue = sidebarOpenCookie\n    ? sidebarOpenCookie === 'false'\n    : !config.sidebarCollapsed;\n\n  const parsed = z.enum(['header', 'sidebar', 'custom']).safeParse(layoutStyle);\n\n  const style = parsed.success ? parsed.data : config.style;\n\n  return {\n    open: sidebarOpenCookieValue,\n    style,\n  };\n}\n"
      }
    ],
    [
      "home/account/members.tsx",
      {
        "filePath": "app/routes/home/account/members.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route as AccountWorkspaceRoute } from '~/types/app/routes/home/account/+types/layout'",
            "importPath": "~/types/app/routes/home/account/+types/layout"
          },
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types/members'",
            "importPath": "~/types/app/routes/home/account/+types/members"
          }
        ],
        "content": "import { useMemo } from 'react';\n\nimport { redirect, useRouteLoaderData } from 'react-router';\n\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { PlusCircle } from 'lucide-react';\nimport { getI18n } from 'react-i18next';\nimport { z } from 'zod';\n\nimport { verifyCsrfToken } from '@kit/csrf/server';\nimport { getSupabaseBrowserClient } from '@kit/supabase/browser-client';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport {\n  AccountInvitationsTable,\n  AccountMembersTable,\n  InviteMembersDialogContainer,\n} from '@kit/team-accounts/components';\nimport {\n  DeleteInvitationSchema,\n  InviteMembersSchema,\n  RemoveMemberSchema,\n  RenewInvitationSchema,\n  TransferOwnershipSchema,\n  UpdateInvitationSchema,\n  UpdateMemberRoleSchema,\n} from '@kit/team-accounts/schema';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { Button } from '@kit/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@kit/ui/card';\nimport { If } from '@kit/ui/if';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport { Database } from '~/lib/database.types';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { TeamAccountLayoutPageHeader } from '~/routes/home/account/_components/team-account-layout-page-header';\nimport type { Route as AccountWorkspaceRoute } from '~/types/app/routes/home/account/+types/layout';\nimport type { Route } from '~/types/app/routes/home/account/+types/members';\n\nimport { loadMembersPageData } from './_lib/members-page-loader';\n\nconst MembersActionsSchema = z.union([\n  InviteMembersSchema,\n  RenewInvitationSchema,\n  UpdateMemberRoleSchema,\n  DeleteInvitationSchema,\n  UpdateInvitationSchema,\n  RemoveMemberSchema,\n  TransferOwnershipSchema,\n]);\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nasync function membersLoader(\n  client: SupabaseClient<Database>,\n  accountSlug: string,\n) {\n  const [members, invitations, userResponse, canAddMember] =\n    await loadMembersPageData(client, accountSlug);\n\n  if ('redirectTo' in userResponse) {\n    throw redirect(userResponse.redirectTo);\n  }\n\n  return {\n    accountSlug,\n    members,\n    invitations,\n    user: userResponse.data,\n    canAddMember,\n  };\n}\n\nexport async function loader(args: Route.LoaderArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const i18n = await createI18nServerInstance(args.request);\n  const title = i18n.t('teams:members.pageTitle');\n  const accountSlug = args.params.account as string;\n\n  const data = await membersLoader(client, accountSlug);\n\n  return {\n    title,\n    ...data,\n  };\n}\n\nexport async function clientLoader(args: Route.LoaderArgs) {\n  const client = getSupabaseBrowserClient();\n  const accountSlug = args.params.account as string;\n\n  const i18n = getI18n();\n  const title = i18n.t('teams:members.pageTitle');\n  const data = await membersLoader(client, accountSlug);\n\n  return {\n    title,\n    ...data,\n  };\n}\n\nexport default function TeamAccountMembersPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  const { workspace } = useRouteLoaderData(\n    'routes/home/account/layout',\n  ) as AccountWorkspaceRoute.ComponentProps['loaderData'];\n\n  const account = workspace.account;\n\n  const canManageRoles = account.permissions.includes('roles.manage');\n  const canManageInvitations = account.permissions.includes('invites.manage');\n\n  const isPrimaryOwner = account.primary_owner_user_id === data.user.id;\n  const currentUserRoleHierarchy = account.role_hierarchy_level;\n\n  const permissions = useMemo(() => {\n    return {\n      canUpdateInvitation: canManageRoles,\n      canRemoveInvitation: canManageRoles,\n      currentUserRoleHierarchy,\n    };\n  }, [canManageRoles, currentUserRoleHierarchy]);\n\n  return (\n    <>\n      <TeamAccountLayoutPageHeader\n        title={<Trans i18nKey={'common:membersTabLabel'} />}\n        description={<AppBreadcrumbs />}\n        account={data.accountSlug}\n      />\n\n      <PageBody>\n        <div className={'flex w-full max-w-4xl flex-col space-y-6 pb-32'}>\n          <Card>\n            <CardHeader className={'flex flex-row justify-between'}>\n              <div className={'flex flex-col space-y-1.5'}>\n                <CardTitle>\n                  <Trans i18nKey={'common:accountMembers'} />\n                </CardTitle>\n\n                <CardDescription>\n                  <Trans i18nKey={'common:membersTabDescription'} />\n                </CardDescription>\n              </div>\n\n              <If condition={canManageInvitations && data.canAddMember}>\n                <InviteMembersDialogContainer\n                  userRoleHierarchy={currentUserRoleHierarchy}\n                  accountSlug={data.accountSlug}\n                >\n                  <Button size={'sm'} data-test={'invite-members-form-trigger'}>\n                    <PlusCircle className={'mr-2 w-4'} />\n\n                    <span>\n                      <Trans i18nKey={'teams:inviteMembersButton'} />\n                    </span>\n                  </Button>\n                </InviteMembersDialogContainer>\n              </If>\n            </CardHeader>\n\n            <CardContent>\n              <AccountMembersTable\n                userRoleHierarchy={currentUserRoleHierarchy}\n                currentUserId={data.user.id}\n                currentAccountId={account.id}\n                members={data.members}\n                isPrimaryOwner={isPrimaryOwner}\n                canManageRoles={canManageRoles}\n              />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className={'flex flex-row justify-between'}>\n              <div className={'flex flex-col space-y-1.5'}>\n                <CardTitle>\n                  <Trans i18nKey={'teams:pendingInvitesHeading'} />\n                </CardTitle>\n\n                <CardDescription>\n                  <Trans i18nKey={'teams:pendingInvitesDescription'} />\n                </CardDescription>\n              </div>\n            </CardHeader>\n\n            <CardContent>\n              <AccountInvitationsTable\n                permissions={permissions}\n                invitations={data.invitations}\n              />\n            </CardContent>\n          </Card>\n        </div>\n      </PageBody>\n    </>\n  );\n}\n\nexport const action = async function (args: Route.ActionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const json = await args.request.json();\n  const data = await MembersActionsSchema.parseAsync(json);\n\n  await verifyCsrfToken(args.request, data.payload.csrfToken);\n\n  switch (data.intent) {\n    case 'create-invitations': {\n      const { createInvitationsAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return createInvitationsAction({ client, data });\n    }\n\n    case 'update-member-role': {\n      const { updateMemberRoleAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return updateMemberRoleAction({\n        client,\n        data,\n      });\n    }\n\n    case 'renew-invitation': {\n      const { renewInvitationAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return renewInvitationAction({\n        client,\n        data,\n      });\n    }\n\n    case 'delete-invitation': {\n      const { deleteInvitationAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return deleteInvitationAction({\n        client,\n        data,\n      });\n    }\n\n    case 'update-invitation': {\n      const { updateInvitationAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return updateInvitationAction({\n        client,\n        data,\n      });\n    }\n\n    case 'remove-member': {\n      const { removeMemberFromAccountAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return removeMemberFromAccountAction({\n        client,\n        data,\n      });\n    }\n\n    case 'transfer-ownership': {\n      const { transferOwnershipAction } = await import(\n        '@kit/team-accounts/actions'\n      );\n\n      return transferOwnershipAction({\n        client,\n        data,\n      });\n    }\n  }\n};\n"
      }
    ],
    [
      "home/account/settings.tsx",
      {
        "filePath": "app/routes/home/account/settings.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route as AccountWorkspaceRoute } from '~/types/app/routes/home/account/+types/layout'",
            "importPath": "~/types/app/routes/home/account/+types/layout"
          },
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types/settings'",
            "importPath": "~/types/app/routes/home/account/+types/settings"
          }
        ],
        "content": "import { useRouteLoaderData } from 'react-router';\n\nimport { getI18n } from 'react-i18next';\nimport { z } from 'zod';\n\nimport { verifyCsrfToken } from '@kit/csrf/server';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport {\n  deleteTeamAccountAction,\n  leaveTeamAccountAction,\n  updateTeamAccountName,\n} from '@kit/team-accounts/actions';\nimport { TeamAccountSettingsContainer } from '@kit/team-accounts/components';\nimport {\n  DeleteTeamAccountSchema,\n  LeaveTeamAccountSchema,\n  UpdateTeamNameSchema,\n} from '@kit/team-accounts/schema';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport featureFlagsConfig from '~/config/feature-flags.config';\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route as AccountWorkspaceRoute } from '~/types/app/routes/home/account/+types/layout';\nimport type { Route } from '~/types/app/routes/home/account/+types/settings';\n\nimport { TeamAccountLayoutPageHeader } from './_components/team-account-layout-page-header';\n\nconst paths = {\n  teamAccountSettings: pathsConfig.app.accountSettings,\n};\n\nconst ActionSchema = z.union([\n  LeaveTeamAccountSchema,\n  DeleteTeamAccountSchema,\n  UpdateTeamNameSchema,\n]);\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport async function loader(args: Route.LoaderArgs) {\n  const i18n = await createI18nServerInstance(args.request);\n  const title = i18n.t('teams:settings.pageTitle');\n\n  return {\n    title,\n  };\n}\n\nexport async function clientLoader() {\n  const i18n = getI18n();\n  const title = i18n.t('teams:settings.pageTitle');\n\n  return {\n    title,\n  };\n}\n\nexport default function TeamAccountSettingsPage() {\n  const data = useRouteLoaderData(\n    'routes/home/account/layout',\n  ) as AccountWorkspaceRoute.ComponentProps['loaderData'];\n\n  const workspace = data.workspace;\n\n  const account = {\n    id: workspace.account.id,\n    name: workspace.account.name,\n    pictureUrl: workspace.account.picture_url,\n    slug: workspace.account.slug,\n    primaryOwnerUserId: workspace.account.primary_owner_user_id,\n  };\n\n  return (\n    <>\n      <TeamAccountLayoutPageHeader\n        account={account.slug}\n        title={<Trans i18nKey={'teams:settings.pageTitle'} />}\n        description={<AppBreadcrumbs />}\n      />\n\n      <PageBody>\n        <div className={'flex max-w-2xl flex-1 flex-col'}>\n          <TeamAccountSettingsContainer\n            account={account}\n            paths={paths}\n            features={{\n              enableTeamDeletion: featureFlagsConfig.enableTeamDeletion,\n            }}\n          />\n        </div>\n      </PageBody>\n    </>\n  );\n}\n\nexport const action = async (args: Route.ActionArgs) => {\n  const json = await args.request.json();\n  const data = ActionSchema.parse(json);\n\n  await verifyCsrfToken(args.request, data.payload.csrfToken);\n\n  const client = getSupabaseServerClient(args.request);\n\n  switch (data.intent) {\n    case 'leave-team':\n      return leaveTeamAccountAction({\n        data,\n        client,\n      });\n\n    case 'update-team-name':\n      return updateTeamAccountName({\n        client,\n        data,\n      });\n\n    case 'delete-team-account':\n      return deleteTeamAccountAction({\n        data,\n        client,\n      });\n  }\n};\n"
      }
    ],
    [
      "home/user/billing-return.tsx",
      {
        "filePath": "app/routes/home/user/billing-return.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/account/+types/billing-return'",
            "importPath": "~/types/app/routes/home/account/+types/billing-return"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/home/account/+types/billing-return';\n\nimport * as ReturnPage from '../account/billing-return';\n\nexport const meta = ReturnPage.meta;\n\nexport const loader = (args: Route.LoaderArgs) => {\n  return ReturnPage.loader(args);\n};\n\nconst Page = ReturnPage.default;\n\nexport default Page;\n"
      }
    ],
    [
      "home/user/billing.tsx",
      {
        "filePath": "app/routes/home/user/billing.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/user/+types/billing'",
            "importPath": "~/types/app/routes/home/user/+types/billing"
          }
        ],
        "content": "import { Form } from 'react-router';\n\nimport {\n  BillingPortalCard,\n  CurrentLifetimeOrderCard,\n  CurrentSubscriptionCard,\n} from '@kit/billing-gateway/components';\nimport { CsrfTokenFormField, useCsrfToken } from '@kit/csrf/client';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { If } from '@kit/ui/if';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport billingConfig from '~/config/billing.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { requireUserLoader } from '~/lib/require-user-loader';\nimport { HomeLayoutPageHeader } from '~/routes/home/user/_components/home-page-header';\nimport type { Route } from '~/types/app/routes/home/user/+types/billing';\n\nimport { PersonalAccountCheckoutForm } from './_components/personal-account-checkout-form';\nimport { loadPersonalAccountBillingPageData } from './_lib/load-personal-account-billing.server';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const user = await requireUserLoader(request);\n  const { t } = await createI18nServerInstance(request);\n\n  const client = getSupabaseServerClient(request);\n\n  const [data, customerId] = await loadPersonalAccountBillingPageData({\n    userId: user.id,\n    client,\n  });\n\n  return {\n    title: t('account:billingTab'),\n    data,\n    customerId,\n  };\n};\n\nexport default function PersonalAccountBillingPage(\n  props: Route.ComponentProps,\n) {\n  const { data, customerId } = props.loaderData;\n\n  return (\n    <>\n      <HomeLayoutPageHeader\n        title={<Trans i18nKey={'common:routes.billing'} />}\n        description={<AppBreadcrumbs />}\n      />\n\n      <PageBody>\n        <div className={'flex flex-col space-y-4'}>\n          <If condition={!data}>\n            <PersonalAccountCheckoutForm customerId={customerId} />\n\n            <If condition={customerId}>\n              <CustomerBillingPortalForm />\n            </If>\n          </If>\n\n          <If condition={data}>\n            {(data) => (\n              <div className={'flex w-full max-w-2xl flex-col space-y-6'}>\n                {'active' in data ? (\n                  <CurrentSubscriptionCard\n                    subscription={data}\n                    config={billingConfig}\n                  />\n                ) : (\n                  <CurrentLifetimeOrderCard\n                    order={data}\n                    config={billingConfig}\n                  />\n                )}\n\n                <If condition={!data}>\n                  <PersonalAccountCheckoutForm customerId={customerId} />\n                </If>\n\n                <If condition={customerId}>\n                  <CustomerBillingPortalForm />\n                </If>\n              </div>\n            )}\n          </If>\n        </div>\n      </PageBody>\n    </>\n  );\n}\n\nfunction CustomerBillingPortalForm() {\n  const csrfToken = useCsrfToken();\n\n  return (\n    <Form method={'POST'} action={'/api/billing/customer-portal'}>\n      <input\n        type=\"hidden\"\n        name={'intent'}\n        value={'personal-account-billing-portal'}\n      />\n\n      <CsrfTokenFormField value={csrfToken} />\n\n      <BillingPortalCard />\n    </Form>\n  );\n}\n"
      }
    ],
    [
      "home/user/index.tsx",
      {
        "filePath": "app/routes/home/user/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/user/+types'",
            "importPath": "~/types/app/routes/home/user/+types"
          }
        ],
        "content": "import React, { useState } from 'react';\nimport { useRouteLoaderData, useNavigate } from 'react-router';\n\nimport { getI18n } from 'react-i18next';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/home/user/+types';\n\nimport { UserWorkspace } from './_lib/load-user-workspace.server';\nimport { \n  Bell as BellIcon, \n  Calendar as CalendarIcon, \n  CheckCircle as CheckCircleIcon, \n  ChevronDown as ChevronDownIcon, \n  ChevronRight as ChevronRightIcon, \n  Clock as ClockIcon, \n  Edit as EditIcon, \n  Filter as FilterIcon, \n  Grid as GridIcon, \n  Heart as HeartIcon, \n  Image as ImageIcon, \n  List as ListIcon, \n  Map as MapIcon, \n  MapPin as MapPinIcon, \n  MessageSquare as MessageSquareIcon, \n  MoreHorizontal as MoreHorizontalIcon, \n  Music as MusicIcon, \n  Plus as PlusIcon, \n  Search as SearchIcon, \n  Settings as SettingsIcon, \n  ShoppingBag as ShoppingBagIcon, \n  Star as StarIcon, \n  Ticket as TicketIcon, \n  Trash as TrashIcon, \n  TrendingUp as TrendingUpIcon, \n  User as UserIcon, \n  X as XIcon, \n  AlertCircle as AlertCircleIcon, \n  Bookmark as BookmarkIcon, \n  DollarSign as DollarSignIcon, \n  ExternalLink as ExternalLinkIcon \n} from 'lucide-react';\n\n// Inline mockdata\nconst followedArtists = [\n  {\n    id: 'artist-1',\n    name: 'The Sunset Vibes',\n    image: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n    location: 'Clearwater, FL',\n    genre: 'Indie Rock',\n    upcomingShows: 3,\n    lastActive: '2024-01-15',\n    newUpdates: 2,\n    isVerified: true\n  },\n  {\n    id: 'artist-2', \n    name: 'Jazz Collective',\n    image: 'https://images.unsplash.com/photo-1514525253161-7a46d19cd819?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n    location: 'Tampa, FL',\n    genre: 'Jazz',\n    upcomingShows: 1,\n    lastActive: '2024-01-10',\n    newUpdates: 0,\n    isVerified: false\n  }\n];\n\nconst upcomingShows = [\n  {\n    id: 'show-1',\n    artistName: 'The Sunset Vibes',\n    artistImage: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n    date: '2024-02-15T19:00:00',\n    venueName: 'The Grand Hall',\n    venueLocation: 'Clearwater, FL',\n    ticketPrice: 45,\n    ticketStatus: 'Available',\n    distance: 12,\n    hasPriceAlert: false\n  },\n  {\n    id: 'show-2',\n    artistName: 'Jazz Collective', \n    artistImage: 'https://images.unsplash.com/photo-1514525253161-7a46d19cd819?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n    date: '2024-02-20T20:00:00',\n    venueName: 'Coachman Park',\n    venueLocation: 'Clearwater, FL', \n    ticketPrice: 35,\n    ticketStatus: 'Limited',\n    distance: 8,\n    hasPriceAlert: true\n  }\n];\n\nconst exclusiveContent = [\n  {\n    id: 'content-1',\n    title: 'New Single: \"Sunset Dreams\"',\n    artistName: 'The Sunset Vibes',\n    type: 'release',\n    date: '2024-01-10',\n    image: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n    description: 'Check out our latest single featuring dreamy melodies and sunset vibes.',\n    isNew: true\n  }\n];\n\nconst userActivity = {\n  reviews: [\n    {\n      id: 'review-1',\n      artistName: 'The Sunset Vibes',\n      eventName: 'Winter Concert',\n      rating: 5,\n      content: 'Amazing performance! The energy was incredible.',\n      date: '2024-01-05',\n      likes: 12\n    }\n  ],\n  photos: [\n    {\n      id: 'photo-1',\n      artistName: 'The Sunset Vibes',\n      eventName: 'Winter Concert',\n      image: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      likes: 8\n    }\n  ],\n  discussions: [\n    {\n      id: 'discussion-1',\n      title: 'Best songs from Winter Concert',\n      artistName: 'The Sunset Vibes',\n      replies: 5,\n      lastActivity: '2024-01-08'\n    }\n  ],\n  savedItems: [\n    {\n      id: 'item-1',\n      title: 'Winter Concert Tickets',\n      artistName: 'The Sunset Vibes',\n      type: 'ticket',\n      price: 45,\n      image: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      date: '2024-02-15',\n      eventName: 'Winter Concert',\n      inStock: true\n    }\n  ]\n};\n\n// Inline PlannedEventsWidget\nconst PlannedEventsWidget = () => {\n  return (\n    <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n      <div className=\"px-4 py-5 sm:px-6\">\n        <h3 className=\"text-lg font-medium leading-6 text-gray-900\">Planned Events</h3>\n      </div>\n      <div className=\"border-t border-gray-200 px-4 py-5\">\n        <p className=\"text-sm text-gray-500\">No planned events yet.</p>\n      </div>\n    </div>\n  );\n};\n\n// Inline CheckInFeed\nconst CheckInFeed = ({ type, limit }: { type: string; limit: number }) => {\n  return (\n    <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n      <div className=\"px-4 py-5 sm:px-6\">\n        <h3 className=\"text-lg font-medium leading-6 text-gray-900\">\n          {type === 'friends' ? 'Friends Activity' : 'Recent Check-ins'}\n        </h3>\n      </div>\n      <div className=\"border-t border-gray-200 px-4 py-5\">\n        <p className=\"text-sm text-gray-500\">No recent activity.</p>\n      </div>\n    </div>\n  );\n};\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(request);\n  const title = 'Fan Dashboard - GoEventCity';\n\n  return {\n    title,\n  };\n};\n\nexport const clientLoader = async () => {\n  const i18n = getI18n();\n  const title = 'Fan Dashboard - GoEventCity';\n\n  return {\n    title,\n  };\n};\n\nexport default function UserHomePage() {\n  const navigate = useNavigate();\n  const { workspace } = useRouteLoaderData('routes/home/user/layout') as {\n    workspace: UserWorkspace;\n  };\n\n  // State for sorting and filtering\n  const [artistSort, setArtistSort] = useState('recently-active');\n  const [showView, setShowView] = useState('list');\n  const [distanceFilter, setDistanceFilter] = useState('all');\n  const [contentFilter, setContentFilter] = useState('all');\n  const [activeTab, setActiveTab] = useState('artists');\n\n  // Filter shows based on distance\n  const filteredShows = upcomingShows.filter(show => {\n    const distance = show.distance;\n    if (distanceFilter === 'all') return true;\n    if (distanceFilter === 'local' && distance <= 50) return true;\n    if (distanceFilter === 'regional' && distance <= 200) return true;\n    if (distanceFilter === 'national' && distance > 200) return true;\n    return false;\n  });\n\n  // Sort artists based on selected option\n  const sortedArtists = [...followedArtists].sort((a, b) => {\n    if (artistSort === 'a-z') return a.name.localeCompare(b.name);\n    if (artistSort === 'most-shows') return b.upcomingShows - a.upcomingShows;\n    return new Date(b.lastActive).getTime() - new Date(a.lastActive).getTime();\n  });\n\n  // Filter content based on type\n  const filteredContent = exclusiveContent.filter(content => {\n    if (contentFilter === 'all') return true;\n    return content.type === contentFilter;\n  });\n\n  // Format date for display\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric',\n      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined\n    });\n  };\n\n  // Format time for display\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"bg-indigo-700 text-white rounded-lg mb-8\">\n          <div className=\"px-4 sm:px-6 lg:px-8 py-6\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold\">My Fan Dashboard</h1>\n                <p className=\"mt-1 text-indigo-200\">\n                  Keep track of your favorite artists, upcoming shows, and exclusive content\n                </p>\n              </div>\n              <div className=\"mt-4 md:mt-0 flex space-x-3\">\n                <button className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-700 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  <BellIcon className=\"h-5 w-5 mr-2\" />\n                  Notifications\n                </button>\n                <button \n                  onClick={() => navigate('/home/settings')}\n                  className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                >\n                  <SettingsIcon className=\"h-5 w-5 mr-2\" />\n                  Settings\n                </button>\n              </div>\n            </div>\n            \n            {/* Dashboard Navigation Tabs */}\n            <div className=\"mt-6\">\n              <nav className=\"flex space-x-4\">\n                <button \n                  onClick={() => setActiveTab('artists')} \n                  className={`px-3 py-2 font-medium text-sm rounded-md ${activeTab === 'artists' ? 'bg-indigo-800 text-white' : 'text-indigo-200 hover:text-white hover:bg-indigo-800'}`}\n                >\n                  <span className=\"flex items-center\">\n                    <MusicIcon className=\"mr-2 h-5 w-5\" />\n                    My Artists\n                  </span>\n                </button>\n                <button \n                  onClick={() => setActiveTab('shows')} \n                  className={`px-3 py-2 font-medium text-sm rounded-md ${activeTab === 'shows' ? 'bg-indigo-800 text-white' : 'text-indigo-200 hover:text-white hover:bg-indigo-800'}`}\n                >\n                  <span className=\"flex items-center\">\n                    <TicketIcon className=\"mr-2 h-5 w-5\" />\n                    Upcoming Shows\n                  </span>\n                </button>\n                <button \n                  onClick={() => setActiveTab('content')} \n                  className={`px-3 py-2 font-medium text-sm rounded-md ${activeTab === 'content' ? 'bg-indigo-800 text-white' : 'text-indigo-200 hover:text-white hover:bg-indigo-800'}`}\n                >\n                  <span className=\"flex items-center\">\n                    <StarIcon className=\"mr-2 h-5 w-5\" />\n                    Exclusive Content\n                  </span>\n                </button>\n                <button \n                  onClick={() => setActiveTab('activity')} \n                  className={`px-3 py-2 font-medium text-sm rounded-md ${activeTab === 'activity' ? 'bg-indigo-800 text-white' : 'text-indigo-200 hover:text-white hover:bg-indigo-800'}`}\n                >\n                  <span className=\"flex items-center\">\n                    <UserIcon className=\"mr-2 h-5 w-5\" />\n                    My Activity\n                  </span>\n                </button>\n              </nav>\n            </div>\n          </div>\n        </div>\n\n        {/* Dashboard Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* My Artists Section */}\n            {activeTab === 'artists' && (\n              <div>\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-gray-900\">My Artists</h2>\n                  <div className=\"mt-3 md:mt-0 flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3\">\n                    <div className=\"relative\">\n                      <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                        <SearchIcon className=\"h-5 w-5 text-gray-400\" />\n                      </div>\n                      <input \n                        type=\"text\" \n                        placeholder=\"Search artists\" \n                        className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" \n                      />\n                    </div>\n                    <div className=\"inline-flex shadow-sm rounded-md\">\n                      <select \n                        value={artistSort} \n                        onChange={e => setArtistSort(e.target.value)} \n                        className=\"block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n                      >\n                        <option value=\"recently-active\">Recently Active</option>\n                        <option value=\"a-z\">A-Z</option>\n                        <option value=\"most-shows\">Most Shows</option>\n                      </select>\n                    </div>\n                    <button className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                      <PlusIcon className=\"h-5 w-5 mr-2\" />\n                      Follow New Artist\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Artist Grid */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {sortedArtists.map(artist => (\n                    <div key={artist.id} className=\"bg-white rounded-lg shadow overflow-hidden hover:shadow-md transition-shadow duration-300\">\n                      <div className=\"relative h-48\">\n                        <img src={artist.image} alt={artist.name} className=\"w-full h-full object-cover\" />\n                        {artist.newUpdates > 0 && (\n                          <div className=\"absolute top-3 right-3 bg-red-500 text-white rounded-full px-2 py-1 text-xs font-bold flex items-center\">\n                            <BellIcon className=\"h-3 w-3 mr-1\" />\n                            {artist.newUpdates} new\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                            {artist.name}\n                            {artist.isVerified && <CheckCircleIcon className=\"h-4 w-4 text-blue-500 ml-1\" />}\n                          </h3>\n                          <button className=\"text-gray-400 hover:text-gray-500\">\n                            <MoreHorizontalIcon className=\"h-5 w-5\" />\n                          </button>\n                        </div>\n                        <div className=\"mt-1 flex items-center text-sm text-gray-500\">\n                          <MapPinIcon className=\"h-4 w-4 mr-1\" />\n                          {artist.location}\n                        </div>\n                        <div className=\"mt-1 flex items-center text-sm text-gray-500\">\n                          <MusicIcon className=\"h-4 w-4 mr-1\" />\n                          {artist.genre}\n                        </div>\n                        <div className=\"mt-3 flex items-center justify-between\">\n                          <span className=\"text-sm font-medium text-indigo-600\">\n                            {artist.upcomingShows} upcoming {artist.upcomingShows === 1 ? 'show' : 'shows'}\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            Last active {new Date(artist.lastActive).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"mt-4 flex space-x-2\">\n                          <button className=\"flex-1 bg-indigo-100 text-indigo-700 hover:bg-indigo-200 py-2 px-3 rounded-md text-sm font-medium\">\n                            View Profile\n                          </button>\n                          <button className=\"flex-1 bg-gray-100 text-gray-700 hover:bg-gray-200 py-2 px-3 rounded-md text-sm font-medium\">\n                            Unfollow\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Other tabs would go here similar to the original */}\n            {activeTab === 'shows' && (\n              <div className=\"bg-white shadow rounded-lg p-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Upcoming Shows</h2>\n                <p className=\"text-gray-600\">Shows content coming soon...</p>\n              </div>\n            )}\n\n            {activeTab === 'content' && (\n              <div className=\"bg-white shadow rounded-lg p-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Exclusive Content</h2>\n                <p className=\"text-gray-600\">Exclusive content coming soon...</p>\n              </div>\n            )}\n\n            {activeTab === 'activity' && (\n              <div className=\"bg-white shadow rounded-lg p-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">My Activity</h2>\n                <p className=\"text-gray-600\">Activity content coming soon...</p>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"space-y-8\">\n            {/* Planned Events Widget */}\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Upcoming Events</h2>\n              <PlannedEventsWidget />\n            </div>\n            \n            {/* Friends' Check-ins */}\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Friends' Activity</h2>\n              <CheckInFeed type=\"friends\" limit={3} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "home/user/layout.tsx",
      {
        "filePath": "app/routes/home/user/layout.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/user/+types/layout'",
            "importPath": "~/types/app/routes/home/user/+types/layout"
          }
        ],
        "content": "import { Outlet } from 'react-router';\n\nimport { z } from 'zod';\n\nimport { Page, PageMobileNavigation, PageNavigation } from '@kit/ui/page';\nimport { SidebarProvider } from '@kit/ui/shadcn-sidebar';\n\nimport { personalAccountNavigationConfig } from '~/config/personal-account-navigation.config';\nimport { layoutStyleCookie, sidebarStateCookie } from '~/lib/cookies';\nimport { requireUserLoader } from '~/lib/require-user-loader';\nimport { loadUserWorkspace } from '~/routes/home/user/_lib/load-user-workspace.server';\nimport type { Route } from '~/types/app/routes/home/user/+types/layout';\n\n// home imports\nimport { HomeMenuNavigation } from './_components/home-menu-navigation';\nimport { HomeMobileNavigation } from './_components/home-mobile-navigation';\nimport { HomeSidebar } from './_components/home-sidebar';\n\nexport async function loader(args: Route.LoaderArgs) {\n  const request = args.request;\n  const user = await requireUserLoader(request);\n\n  const [workspace, layoutState] = await Promise.all([\n    loadUserWorkspace(request),\n    getLayoutState(request),\n  ]);\n\n  return {\n    workspace: {\n      ...workspace,\n      user,\n    },\n    layoutState,\n  };\n}\n\nfunction SidebarLayout(props: Route.ComponentProps & React.PropsWithChildren) {\n  const { workspace, layoutState } = props.loaderData;\n\n  return (\n    <SidebarProvider defaultOpen={layoutState.open}>\n      <Page style={'sidebar'}>\n        <PageNavigation>\n          <HomeSidebar workspace={workspace} />\n        </PageNavigation>\n\n        <PageMobileNavigation className={'flex items-center justify-between'}>\n          <HomeMobileNavigation workspace={workspace} />\n        </PageMobileNavigation>\n\n        {props.children}\n      </Page>\n    </SidebarProvider>\n  );\n}\n\nfunction HeaderLayout(props: Route.ComponentProps & React.PropsWithChildren) {\n  const { workspace } = props.loaderData;\n\n  return (\n    <Page style={'header'}>\n      <PageNavigation>\n        <HomeMenuNavigation workspace={workspace} />\n      </PageNavigation>\n\n      <PageMobileNavigation className={'flex items-center justify-between'}>\n        <HomeMobileNavigation workspace={workspace} />\n      </PageMobileNavigation>\n\n      {props.children}\n    </Page>\n  );\n}\n\nexport default function UserHomeLayout(props: Route.ComponentProps) {\n  const { layoutState } = props.loaderData;\n\n  if (layoutState.style === 'sidebar') {\n    return <SidebarLayout {...props}>{<Outlet />}</SidebarLayout>;\n  }\n\n  return <HeaderLayout {...props}>{<Outlet />}</HeaderLayout>;\n}\n\nasync function getLayoutState(request: Request) {\n  const cookieHeader = request.headers.get('Cookie');\n  const sidebarOpenCookie = await sidebarStateCookie.parse(cookieHeader);\n  const layoutCookie = await layoutStyleCookie.parse(cookieHeader);\n\n  const layoutStyle = z\n    .enum(['header', 'sidebar', 'custom'])\n    .safeParse(layoutCookie);\n\n  const sidebarOpenCookieValue = sidebarOpenCookie\n    ? sidebarOpenCookie === 'false'\n    : !personalAccountNavigationConfig.sidebarCollapsed;\n\n  return {\n    open: sidebarOpenCookieValue,\n    style: layoutStyle.success\n      ? layoutStyle.data\n      : personalAccountNavigationConfig.style,\n  };\n}\n"
      }
    ],
    [
      "home/user/settings.tsx",
      {
        "filePath": "app/routes/home/user/settings.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/home/user/+types/settings'",
            "importPath": "~/types/app/routes/home/user/+types/settings"
          }
        ],
        "content": "import { deletePersonalAccountAction } from '@kit/accounts/actions';\nimport { PersonalAccountSettingsContainer } from '@kit/accounts/personal-account-settings';\nimport { DeletePersonalAccountSchema } from '@kit/accounts/schema';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport authConfig from '~/config/auth.config';\nimport featureFlagsConfig from '~/config/feature-flags.config';\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { requireUserLoader } from '~/lib/require-user-loader';\nimport type { Route } from '~/types/app/routes/home/user/+types/settings';\n\nimport { HomeLayoutPageHeader } from './_components/home-page-header';\n\nconst features = {\n  enableAccountDeletion: featureFlagsConfig.enableAccountDeletion,\n  enablePasswordUpdate: authConfig.providers.password,\n};\n\nconst paths = {\n  callback: pathsConfig.auth.callback + `?next=${pathsConfig.app.accountHome}`,\n};\n\nconst ActionsSchema = DeletePersonalAccountSchema;\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const user = await requireUserLoader(args.request);\n  const userId = user.id;\n\n  const i18n = await createI18nServerInstance(args.request);\n  const title = i18n.t('account:settingsTab');\n\n  return {\n    title,\n    userId,\n  };\n};\n\nexport default function PersonalAccountSettingsPage(\n  props: Route.ComponentProps,\n) {\n  const { userId } = props.loaderData;\n\n  return (\n    <>\n      <HomeLayoutPageHeader\n        title={<Trans i18nKey={'account:accountTabLabel'} />}\n        description={<AppBreadcrumbs />}\n      />\n\n      <PageBody>\n        <div className={'flex w-full flex-1 flex-col lg:max-w-2xl'}>\n          <PersonalAccountSettingsContainer\n            userId={userId}\n            features={features}\n            paths={paths}\n          />\n        </div>\n      </PageBody>\n    </>\n  );\n}\n\nexport const action = async (args: Route.ActionArgs) => {\n  const json = ActionsSchema.parse(await args.request.json());\n  const client = getSupabaseServerClient(args.request);\n\n  switch (json.intent) {\n    case 'delete-account':\n      return deletePersonalAccountAction({ client, otp: json.payload.otp });\n\n    default:\n      return new Response('Invalid action', { status: 400 });\n  }\n};\n"
      }
    ],
    [
      "how-it-works/index.tsx",
      {
        "filePath": "app/routes/how-it-works/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { HowItWorksPage } from '~/components/magic-patterns/pages/HowItWorksPage'",
            "importPath": "~/components/magic-patterns/pages/HowItWorksPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/how-it-works/+types'",
            "importPath": "~/types/app/routes/how-it-works/+types"
          }
        ],
        "content": "import { HowItWorksPage } from '~/components/magic-patterns/pages/HowItWorksPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/how-it-works/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'HowItWorks - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function HowItWorksRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <HowItWorksPage />;\n}\n"
      }
    ],
    [
      "hubs.tsx",
      {
        "filePath": "app/routes/hubs.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import HubsDiscoveryPage from '~/components/magic-patterns/pages/hubs/index'",
            "importPath": "~/components/magic-patterns/pages/hubs/index"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types/hubs'",
            "importPath": "~/types/app/routes/+types/hubs"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/+types/hubs';;\n\nimport HubsDiscoveryPage from '~/components/magic-patterns/pages/hubs/index';\n\nexport default function HubsRoute() {\n  return <HubsDiscoveryPage />;\n}"
      }
    ],
    [
      "index.tsx",
      {
        "filePath": "app/routes/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { HomePage } from '~/components/magic-patterns/pages/HomePage'",
            "importPath": "~/components/magic-patterns/pages/HomePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types'",
            "importPath": "~/types/app/routes/+types"
          }
        ],
        "content": "import { HomePage } from '~/components/magic-patterns/pages/HomePage';\nimport type { Route } from '~/types/app/routes/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  return {\n    title: 'GoEventCity - Discover Events, Venues & Performers',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events, book venues, and connect with performers in your city',\n    },\n  ];\n};\n\nexport default function HomeRoute(props: Route.ComponentProps) {\n  return <HomePage />;\n}"
      }
    ],
    [
      "join.tsx",
      {
        "filePath": "app/routes/join.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types/join'",
            "importPath": "~/types/app/routes/+types/join"
          }
        ],
        "content": "import { Link, redirect } from 'react-router';\n\nimport { ArrowLeft } from 'lucide-react';\n\nimport { AuthLayoutShell } from '@kit/auth/shared';\nimport { verifyCsrfToken } from '@kit/csrf/server';\nimport { MultiFactorAuthError, requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { acceptInvitationAction } from '@kit/team-accounts/actions';\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { AcceptInvitationContainer } from '@kit/team-accounts/components';\nimport { Button } from '@kit/ui/button';\nimport { Heading } from '@kit/ui/heading';\nimport { Trans } from '@kit/ui/trans';\n\nimport { AppLogo } from '~/components/app-logo';\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/+types/join';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const token = new URL(request.url).searchParams.get('invite_token');\n\n  // no token, redirect to 404\n  if (!token) {\n    throw redirect('/404');\n  }\n\n  const client = getSupabaseServerClient(request);\n  const auth = await requireUser(client);\n\n  // if the user is not logged in or there is an error\n  // redirect to the sign up page with the invite token\n  // so that they will get back to this page after signing up\n  if (auth.error ?? !auth.data) {\n    if (auth.error instanceof MultiFactorAuthError) {\n      const urlParams = new URLSearchParams({\n        next: `${pathsConfig.app.joinTeam}?invite_token=${token}`,\n      });\n\n      const verifyMfaUrl = `${pathsConfig.auth.verifyMfa}?${urlParams.toString()}`;\n\n      // if the user needs to verify MFA, redirect them to the MFA verification page\n      throw redirect(verifyMfaUrl);\n    } else {\n      const path = `${pathsConfig.auth.signUp}?invite_token=${token}`;\n\n      throw redirect(path);\n    }\n  }\n\n  // get api to interact with team accounts\n  const adminClient = getSupabaseServerAdminClient();\n  const api = createTeamAccountsApi(client);\n\n  // the user is logged in, we can now check if the token is valid\n  const invitation = await api.getInvitation(adminClient, token);\n\n  if (!invitation) {\n    throw redirect('/404');\n  }\n\n  // we need to verify the user isn't already in the account\n  // we do so by checking if the user can read the account\n  // if the user can read the account, then they are already in the account\n  const { data: isAlreadyTeamMember } = await client.rpc(\n    'is_account_team_member',\n    {\n      target_account_id: invitation.account.id,\n    },\n  );\n\n  // if the user is already in the account redirect to the home page\n  if (isAlreadyTeamMember) {\n    const { getLogger } = await import('@kit/shared/logger');\n    const logger = await getLogger();\n\n    logger.warn(\n      {\n        name: 'join-team-account',\n        accountId: invitation.account.id,\n        userId: auth.data.id,\n      },\n      'User is already in the account. Redirecting to account page.',\n    );\n\n    // if the user is already in the account redirect to the home page\n    throw redirect(pathsConfig.app.home);\n  }\n\n  // if the user decides to sign in with a different account\n  // we redirect them to the sign in page with the invite token\n  const signOutNext = `${pathsConfig.auth.signIn}?invite_token=${token}`;\n\n  // once the user accepts the invitation, we redirect them to the account home page\n  const accountHome = pathsConfig.app.accountHome.replace(\n    '[account]',\n    invitation.account.slug,\n  );\n\n  const email = auth.data.email ?? '';\n  const i18n = await createI18nServerInstance(request);\n  const title = i18n.t('teams:joinTeamAccount');\n\n  return {\n    title,\n    email,\n    token,\n    invitation,\n    signOutNext,\n    accountHome,\n  };\n};\n\nexport default function JoinTeamAccountPage(props: Route.ComponentProps) {\n  const { invitation, email, accountHome, signOutNext, token } =\n    props.loaderData;\n\n  // the invitation is not found or expired\n  if (!invitation) {\n    return (\n      <AuthLayoutShell Logo={AppLogo}>\n        <InviteNotFoundOrExpired />\n      </AuthLayoutShell>\n    );\n  }\n\n  return (\n    <AuthLayoutShell Logo={AppLogo}>\n      <AcceptInvitationContainer\n        email={email}\n        inviteToken={token}\n        invitation={invitation}\n        paths={{\n          signOutNext,\n          accountHome,\n        }}\n      />\n    </AuthLayoutShell>\n  );\n}\n\n/**\n * @name action\n * @description Accepts an invitation to join a team.\n * @param request\n */\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const data = await request.formData();\n  const client = getSupabaseServerClient(request);\n\n  const csrfToken = data.get('csrfToken') as string;\n\n  await verifyCsrfToken(request, csrfToken);\n\n  return acceptInvitationAction({\n    client,\n    data,\n  });\n};\n\nfunction InviteNotFoundOrExpired() {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <Heading level={6}>\n        <Trans i18nKey={'teams:inviteNotFoundOrExpired'} />\n      </Heading>\n\n      <p className={'text-muted-foreground text-sm'}>\n        <Trans i18nKey={'teams:inviteNotFoundOrExpiredDescription'} />\n      </p>\n\n      <Button asChild className={'w-full'} variant={'outline'}>\n        <Link to={pathsConfig.app.home}>\n          <ArrowLeft className={'mr-2 w-4'} />\n          <Trans i18nKey={'teams:backToHome'} />\n        </Link>\n      </Button>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "magic-patterns/layout.tsx",
      {
        "filePath": "app/routes/magic-patterns/layout.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { Header } from '~/components/magic-patterns/components/layout/Header'",
            "importPath": "~/components/magic-patterns/components/layout/Header"
          },
          {
            "fullImport": "import { Footer } from '~/components/magic-patterns/components/layout/Footer'",
            "importPath": "~/components/magic-patterns/components/layout/Footer"
          }
        ],
        "typeImports": [],
        "content": "import { Outlet } from 'react-router';\n\n// Use Magic Patterns components directly for SSR\nimport { Header } from '~/components/magic-patterns/components/layout/Header';\nimport { Footer } from '~/components/magic-patterns/components/layout/Footer';\n\nexport default function MagicPatternsLayout() {\n  return (\n    <div className={'flex min-h-[100vh] flex-col'}>\n      <Header />\n      <main className=\"flex-1\">\n        <Outlet />\n      </main>\n      <Footer />\n    </div>\n  );\n}"
      }
    ],
    [
      "marketing/blog/$slug.tsx",
      {
        "filePath": "app/routes/marketing/blog/$slug.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/blog/+types/$slug'",
            "importPath": "~/types/app/routes/marketing/blog/+types/$slug"
          }
        ],
        "content": "import { redirect } from 'react-router';\n\nimport { Cms, createCmsClient } from '@kit/cms';\n\nimport type { Route } from '~/types/app/routes/marketing/blog/+types/$slug';\n\nimport { Post } from './_components/post';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const client = await createCmsClient();\n  const slug = args.params.slug as string;\n\n  const post = await client.getContentItemBySlug({ slug, collection: 'posts' });\n\n  if (!post) {\n    throw redirect('/404');\n  }\n\n  return {\n    post,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  if (!data?.post) {\n    return [{}];\n  }\n\n  const { title, description } = data.post;\n\n  return [{ title }, { description }];\n};\n\nexport default function BlogPost(props: Route.ComponentProps) {\n  const { post } = props.loaderData;\n\n  return (\n    <div className={'container sm:max-w-none sm:p-0'}>\n      <Post post={post as Cms.ContentItem} content={post.content} />\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/blog/index.tsx",
      {
        "filePath": "app/routes/marketing/blog/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/blog/+types'",
            "importPath": "~/types/app/routes/marketing/blog/+types"
          }
        ],
        "content": "import { Cms, createCmsClient } from '@kit/cms';\nimport { getLogger } from '@kit/shared/logger';\nimport { If } from '@kit/ui/if';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/blog/+types';\n\n// local imports\nimport { BlogPagination } from './_components/blog-pagination';\nimport { PostPreview } from './_components/post-preview';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const { t, resolvedLanguage: language } = await createI18nServerInstance(\n    args.request,\n  );\n\n  const searchParams = new URL(args.request.url).searchParams;\n  const pageSearchParam = searchParams.get('page');\n\n  const page = pageSearchParam ? parseInt(pageSearchParam) : 0;\n\n  const limit = 10;\n  const offset = page * limit;\n\n  const { total, items: posts } = await getContentItems(\n    language,\n    limit,\n    offset,\n  );\n\n  return {\n    title: t('marketing:blog'),\n    description: t('marketing:blogSubtitle'),\n    posts,\n    total,\n    page,\n    canGoToNextPage: offset + limit < total,\n    canGoToPreviousPage: page > 0,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n      description: data?.description,\n    },\n  ];\n};\n\nconst getContentItems = async (\n  language: string | undefined,\n  limit: number,\n  offset: number,\n) => {\n  const client = await createCmsClient();\n  const logger = await getLogger();\n\n  try {\n    return await client.getContentItems({\n      collection: 'posts',\n      limit,\n      offset,\n      language,\n      sortBy: 'publishedAt',\n      sortDirection: 'desc',\n    });\n  } catch (error) {\n    logger.error({ error }, 'Failed to load blog posts');\n\n    return { total: 0, items: [] };\n  }\n};\n\nexport default function BlogPage(props: Route.ComponentProps) {\n  const {\n    posts,\n    title,\n    description,\n    page,\n    canGoToNextPage,\n    canGoToPreviousPage,\n  } = props.loaderData;\n\n  return (\n    <>\n      <SitePageHeader title={title} subtitle={description} />\n\n      <div className={'container flex flex-col space-y-6 py-12'}>\n        <If\n          condition={posts.length > 0}\n          fallback={<Trans i18nKey=\"marketing:noPosts\" />}\n        >\n          <PostsGridList>\n            {posts.map((post, idx) => {\n              return <PostPreview key={idx} post={post as Cms.ContentItem} />;\n            })}\n          </PostsGridList>\n\n          <div>\n            <BlogPagination\n              currentPage={page}\n              canGoToNextPage={canGoToNextPage}\n              canGoToPreviousPage={canGoToPreviousPage}\n            />\n          </div>\n        </If>\n      </div>\n    </>\n  );\n}\n\nfunction PostsGridList({ children }: React.PropsWithChildren) {\n  return (\n    <div className=\"grid grid-cols-1 gap-y-8 md:grid-cols-2 md:gap-x-8 md:gap-y-12 lg:grid-cols-3 lg:gap-x-12\">\n      {children}\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/contact/index.tsx",
      {
        "filePath": "app/routes/marketing/contact/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/contact/+types'",
            "importPath": "~/types/app/routes/marketing/contact/+types"
          }
        ],
        "content": "import { Heading } from '@kit/ui/heading';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/contact/+types';\n\nimport { ContactForm } from './_components/contact-form';\nimport { ContactEmailSchema } from './_lib/contact-email.schema';\nimport { sendContactEmailAction } from './_lib/server/send-contact-email-action.server';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n      description: data?.subtitle,\n    },\n  ];\n};\n\nexport const loader = async function ({ request }: Route.LoaderArgs) {\n  const { t } = await createI18nServerInstance(request);\n\n  return {\n    title: t('marketing:contact'),\n    subtitle: t('marketing:contactDescription'),\n  };\n};\n\nexport default function ContactPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <div>\n      <SitePageHeader title={data.title} subtitle={data.subtitle} />\n\n      <div className={'container mx-auto'}>\n        <div\n          className={'flex flex-1 flex-col items-center justify-center py-12'}\n        >\n          <div\n            className={\n              'flex w-full max-w-lg flex-col space-y-4 rounded-lg border p-8'\n            }\n          >\n            <div>\n              <Heading level={3}>\n                <Trans i18nKey={'marketing:contactHeading'} />\n              </Heading>\n\n              <p className={'text-muted-foreground'}>\n                <Trans i18nKey={'marketing:contactSubheading'} />\n              </p>\n            </div>\n\n            <ContactForm />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const action = async function ({ request }: Route.ActionArgs) {\n  const data = ContactEmailSchema.parse(await request.json());\n\n  return sendContactEmailAction(data);\n};\n"
      }
    ],
    [
      "marketing/cookie-policy.tsx",
      {
        "filePath": "app/routes/marketing/cookie-policy.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/+types/cookie-policy'",
            "importPath": "~/types/app/routes/marketing/+types/cookie-policy"
          }
        ],
        "content": "import { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/+types/cookie-policy';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async function ({ request }: Route.LoaderArgs) {\n  const { t } = await createI18nServerInstance(request);\n\n  return {\n    title: t('marketing:cookiePolicy'),\n    subtitle: t('marketing:cookiePolicyDescription'),\n  };\n};\n\nexport default function CookiePolicyPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <div>\n      <SitePageHeader title={data.title} subtitle={data.subtitle} />\n\n      <div className={'container mx-auto py-8'}>\n        <div>Your content here</div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/docs/$slug.tsx",
      {
        "filePath": "app/routes/marketing/docs/$slug.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/docs/+types/$slug'",
            "importPath": "~/types/app/routes/marketing/docs/+types/$slug"
          }
        ],
        "content": "import { data, redirect } from 'react-router';\n\nimport { Cms, ContentRenderer, createCmsClient } from '@kit/cms';\nimport { If } from '@kit/ui/if';\nimport { Separator } from '@kit/ui/separator';\n\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/docs/+types/$slug';\n\nimport { DocsCards } from './_components/docs-cards';\n\nconst getPageBySlug = async (slug: string) => {\n  const client = await createCmsClient();\n\n  return client.getContentItemBySlug({ slug, collection: 'documentation' });\n};\n\nexport const meta = (args: Route.MetaArgs) => {\n  if (!args.data) {\n    return [];\n  }\n\n  const { title, description } = args.data.page;\n\n  return [\n    {\n      title,\n      description,\n    },\n  ];\n};\n\nexport const loader = async ({ params }: Route.LoaderArgs) => {\n  const page = await getPageBySlug(params['*'] as string);\n\n  if (!page) {\n    throw redirect('/404');\n  }\n\n  return data({\n    page,\n  });\n};\n\nexport default function DocumentationPage(props: Route.ComponentProps) {\n  const { page } = props.loaderData;\n  const description = page?.description ?? '';\n\n  return (\n    <div className={'flex flex-1 flex-col'}>\n      <SitePageHeader\n        className={'lg:px-8'}\n        container={false}\n        title={page.title}\n        subtitle={description}\n      />\n\n      <div className={'flex flex-col space-y-4 py-6 lg:px-8'}>\n        <article className={'markdoc'}>\n          <ContentRenderer content={page.content} />\n        </article>\n\n        <If condition={page.children.length > 0}>\n          <Separator />\n\n          <DocsCards cards={(page.children ?? []) as Cms.ContentItem[]} />\n        </If>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/docs/index.tsx",
      {
        "filePath": "app/routes/marketing/docs/index.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/docs/+types'",
            "importPath": "~/types/app/routes/marketing/docs/+types"
          }
        ],
        "content": "import { useRouteLoaderData } from 'react-router';\n\nimport { Cms } from '@kit/cms';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/docs/+types';\n\nimport { DocsCards } from './_components/docs-cards';\nimport type { loader as docsLoader } from './layout';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const { t } = await createI18nServerInstance(args.request);\n\n  return {\n    title: t('marketing:documentation'),\n    description: t('marketing:documentationSubtitle'),\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n      description: data?.description,\n    },\n  ];\n};\n\nexport default function DocsPage(props: Route.ComponentProps) {\n  const { title, description } = props.loaderData;\n  const data = useRouteLoaderData<typeof docsLoader>(\n    'routes/marketing/docs/layout',\n  );\n\n  // only top level cards\n  const cards = (data?.pages ?? []).filter((item) => !item.parentId);\n\n  return (\n    <div className={'flex flex-col space-y-6 xl:space-y-10'}>\n      <SitePageHeader title={title} subtitle={description} />\n\n      <div className={'flex flex-col items-center'}>\n        <div className={'container mx-auto max-w-5xl'}>\n          <DocsCards cards={cards as Cms.ContentItem[]} />\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/docs/layout.tsx",
      {
        "filePath": "app/routes/marketing/docs/layout.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/docs/+types/layout'",
            "importPath": "~/types/app/routes/marketing/docs/+types/layout"
          }
        ],
        "content": "import { Outlet } from 'react-router';\n\nimport { Cms } from '@kit/cms';\nimport { SidebarProvider } from '@kit/ui/shadcn-sidebar';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/marketing/docs/+types/layout';\n\n// local imports\nimport { DocsNavigation } from './_components/docs-navigation';\nimport { getDocs } from './_lib/get-docs';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const { resolvedLanguage } = await createI18nServerInstance(request);\n  const docs = await getDocs(resolvedLanguage);\n  const pages = buildDocumentationTree(docs);\n\n  return {\n    pages,\n  };\n};\n\nexport default function DocsLayout(props: Route.ComponentProps) {\n  const { pages } = props.loaderData;\n\n  return (\n    <SidebarProvider className={'container flex'}>\n      <DocsNavigation pages={pages as Cms.ContentItem[]} />\n\n      <Outlet />\n    </SidebarProvider>\n  );\n}\n\n// we want to place all the children under their parent\n// based on the property parentId\nfunction buildDocumentationTree(pages: Cms.ContentItem[]) {\n  const tree: Cms.ContentItem[] = [];\n  const map: Record<string, Cms.ContentItem> = {};\n\n  pages.forEach((page) => {\n    map[page.id] = page;\n  });\n\n  pages.forEach((page) => {\n    if (page.parentId) {\n      const parent = map[page.parentId];\n\n      if (!parent) {\n        return;\n      }\n\n      if (!parent.children) {\n        parent.children = [];\n      }\n\n      parent.children.push(page);\n\n      // sort children by order\n      parent.children.sort((a, b) => a.order - b.order);\n    } else {\n      tree.push(page);\n    }\n  });\n\n  return tree.sort((a, b) => a.order - b.order);\n}\n"
      }
    ],
    [
      "marketing/faq.tsx",
      {
        "filePath": "app/routes/marketing/faq.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/+types/faq'",
            "importPath": "~/types/app/routes/marketing/+types/faq"
          }
        ],
        "content": "import { Link } from 'react-router';\n\nimport { ArrowRight, ChevronDown } from 'lucide-react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Button } from '@kit/ui/button';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/+types/faq';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const { t } = await createI18nServerInstance(request);\n\n  const faqItems = [\n    {\n      question: `Do you offer a free trial?`,\n      answer: `Yes, we offer a 14-day free trial. You can cancel at any time during the trial period and you won't be charged.`,\n    },\n    {\n      question: `Can I cancel my subscription?`,\n      answer: `You can cancel your subscription at any time. You can do this from your account settings.`,\n    },\n    {\n      question: `Where can I find my invoices?`,\n      answer: `You can find your invoices in your account settings.`,\n    },\n    {\n      question: `What payment methods do you accept?`,\n      answer: `We accept all major credit cards and PayPal.`,\n    },\n    {\n      question: `Can I upgrade or downgrade my plan?`,\n      answer: `Yes, you can upgrade or downgrade your plan at any time. You can do this from your account settings.`,\n    },\n    {\n      question: `Do you offer discounts for non-profits?`,\n      answer: `Yes, we offer a 50% discount for non-profits. Please contact us to learn more.`,\n    },\n  ];\n\n  return {\n    title: t('marketing:faq'),\n    faqItems,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport default function FAQPage(props: Route.ComponentProps) {\n  const { faqItems } = props.loaderData;\n  const { t } = useTranslation();\n\n  const structuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    mainEntity: faqItems.map((item) => {\n      return {\n        '@type': 'Question',\n        name: item.question,\n        acceptedAnswer: {\n          '@type': 'Answer',\n          text: item.answer,\n        },\n      };\n    }),\n  };\n\n  return (\n    <>\n      <script\n        key={'ld:json'}\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(structuredData) }}\n      />\n\n      <div className={'flex flex-col space-y-4 xl:space-y-8'}>\n        <SitePageHeader\n          title={t('marketing:faq')}\n          subtitle={t('marketing:faqSubtitle')}\n        />\n\n        <div className={'container flex flex-col space-y-8 pb-16'}>\n          <div className=\"flex w-full max-w-xl flex-col\">\n            {faqItems.map((item, index) => {\n              return <FaqItem key={index} item={item} />;\n            })}\n          </div>\n\n          <div>\n            <Button asChild variant={'outline'}>\n              <Link to={'/contact'}>\n                <span>\n                  <Trans i18nKey={'marketing:contactFaq'} />\n                </span>\n\n                <ArrowRight className={'ml-2 w-4'} />\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction FaqItem({\n  item,\n}: React.PropsWithChildren<{\n  item: {\n    question: string;\n    answer: string;\n  };\n}>) {\n  return (\n    <details className={'group border-b px-2 py-4 last:border-b-transparent'}>\n      <summary\n        className={\n          'flex items-center justify-between hover:cursor-pointer hover:underline'\n        }\n      >\n        <h2\n          className={\n            'hover:underline-none cursor-pointer font-sans font-medium'\n          }\n        >\n          <Trans i18nKey={item.question} defaults={item.question} />\n        </h2>\n\n        <div>\n          <ChevronDown\n            className={'h-5 transition duration-300 group-open:-rotate-180'}\n          />\n        </div>\n      </summary>\n\n      <div className={'text-muted-foreground flex flex-col space-y-2 py-1'}>\n        <Trans i18nKey={item.answer} defaults={item.answer} />\n      </div>\n    </details>\n  );\n}\n"
      }
    ],
    [
      "marketing/layout.tsx",
      {
        "filePath": "app/routes/marketing/layout.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { MainHeader } from '~/components/magic-patterns/components/layout/MainHeader'",
            "importPath": "~/components/magic-patterns/components/layout/MainHeader"
          },
          {
            "fullImport": "import { Footer } from '~/components/magic-patterns/components/layout/Footer'",
            "importPath": "~/components/magic-patterns/components/layout/Footer"
          }
        ],
        "typeImports": [],
        "content": "import { LoaderFunctionArgs, Outlet, useLoaderData } from 'react-router';\n\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\n// Magic Patterns components\nimport { MainHeader } from '~/components/magic-patterns/components/layout/MainHeader';\nimport { Footer } from '~/components/magic-patterns/components/layout/Footer';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const supabase = getSupabaseServerClient(args.request);\n  const { data } = await requireUser(supabase);\n\n  return {\n    user: data,\n  };\n}\n\nexport default function MarketingLayout() {\n  const { user } = useLoaderData<typeof loader>();\n\n  return (\n    <div className={'flex min-h-[100vh] flex-col'}>\n      <MainHeader />\n      <Outlet />\n      <Footer />\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/pricing.tsx",
      {
        "filePath": "app/routes/marketing/pricing.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/+types/pricing'",
            "importPath": "~/types/app/routes/marketing/+types/pricing"
          }
        ],
        "content": "import React from 'react';\nimport { useNavigate } from 'react-router';\nimport { CheckIcon, ArrowRightIcon } from 'lucide-react';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/marketing/+types/pricing';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const { t } = await createI18nServerInstance(request);\n\n  return {\n    title: 'Advertising Packages - GoEventCity',\n    subtitle: 'Choose the perfect advertising solution to reach your target audience',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport default function PricingPage(props: Route.ComponentProps) {\n  const navigate = useNavigate();\n  \n  // Pricing plans\n  const pricingPlans = [{\n    name: 'Basic',\n    price: '$49',\n    period: 'per month',\n    description: 'Perfect for small businesses and occasional events',\n    features: ['Event promotion for up to 3 events', 'Standard listing placement', 'Basic performance analytics', 'Community directory listing'],\n    cta: 'Get Started',\n    highlighted: false,\n    path: '/checkout/details?plan=basic-advertising'\n  }, {\n    name: 'Professional',\n    price: '$99',\n    period: 'per month',\n    description: 'Ideal for regular event organizers and venues',\n    features: ['Event promotion for up to 10 events', 'Featured listing placement', 'Advanced performance analytics', 'Email newsletter inclusion', 'Social media promotion', 'Priority support'],\n    cta: 'Start Free Trial',\n    highlighted: true,\n    path: '/checkout/details?plan=professional-advertising'\n  }, {\n    name: 'Enterprise',\n    price: '$249',\n    period: 'per month',\n    description: 'For major venues and event series',\n    features: ['Unlimited event promotions', 'Premium listing placement', 'Comprehensive analytics dashboard', 'Dedicated email campaigns', 'Homepage showcase rotation', 'Dedicated account manager', 'Custom reporting'],\n    cta: 'Purchase Now',\n    highlighted: false,\n    path: '/checkout/details?plan=enterprise-advertising'\n  }];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-extrabold sm:text-5xl mb-4\">\n              Advertising Packages\n            </h1>\n            <p className=\"mt-3 text-xl max-w-3xl mx-auto\">\n              Choose the perfect advertising solution to reach your target audience\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Pricing Plans */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900\">\n            Select Your Advertising Package\n          </h2>\n          <p className=\"mt-4 text-xl text-gray-600\">\n            Choose the plan that fits your business needs\n          </p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {pricingPlans.map((plan, index) => (\n            <div key={index} className={`border rounded-lg overflow-hidden ${plan.highlighted ? 'border-orange-500 shadow-lg relative' : 'border-gray-200'}`}>\n              {plan.highlighted && (\n                <div className=\"absolute top-0 right-0 -mt-2 -mr-2 bg-orange-500 text-white text-xs font-bold rounded-full h-16 w-16 flex items-center justify-center transform rotate-12\">\n                  <span className=\"text-center leading-tight\">\n                    BEST\n                    <br />\n                    VALUE\n                  </span>\n                </div>\n              )}\n              <div className=\"p-6\">\n                <h3 className=\"text-2xl font-bold text-gray-900\">\n                  {plan.name}\n                </h3>\n                <div className=\"mt-4 flex items-baseline\">\n                  <span className=\"text-4xl font-extrabold text-gray-900\">\n                    {plan.price}\n                  </span>\n                  <span className=\"ml-1 text-xl font-medium text-gray-500\">\n                    {plan.period}\n                  </span>\n                </div>\n                <p className=\"mt-2 text-gray-600\">{plan.description}</p>\n                <ul className=\"mt-6 space-y-4\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-start\">\n                      <CheckIcon className={`h-5 w-5 ${plan.highlighted ? 'text-orange-500' : 'text-green-500'} mr-2 mt-0.5 flex-shrink-0`} />\n                      <span className=\"text-gray-700\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                <div className=\"mt-8\">\n                  <button \n                    className={`w-full py-3 px-4 rounded-md shadow font-medium ${plan.highlighted ? 'bg-orange-600 hover:bg-orange-700 text-white' : 'bg-white hover:bg-gray-50 text-gray-900 border border-gray-300'}`} \n                    onClick={() => navigate(plan.path)}\n                  >\n                    {plan.cta}\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"text-center mt-12 p-6 bg-gray-50 rounded-lg border border-gray-200\">\n          <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n            Need a custom solution?\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Our team can create a tailored advertising package to meet your specific needs\n          </p>\n          <button \n            className=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-orange-600 hover:bg-orange-700\" \n            onClick={() => navigate('/advertise/contact')}\n          >\n            Contact Our Sales Team\n            <ArrowRightIcon className=\"ml-2 h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n      \n      {/* FAQ Section */}\n      <div className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"mt-4 text-xl text-gray-600\">\n              Everything you need to know about our advertising packages\n            </p>\n          </div>\n          <div className=\"grid gap-6 lg:grid-cols-2\">\n            {[{\n              question: 'How soon will my ads start running?',\n              answer: 'Once your payment is processed, your ads will typically start running within 24 hours. For enterprise customers, we offer expedited setup.'\n            }, {\n              question: 'Can I change my plan later?',\n              answer: 'Yes, you can upgrade or downgrade your plan at any time. Changes will take effect at the start of your next billing cycle.'\n            }, {\n              question: 'Do you offer refunds?',\n              answer: \"We offer a 7-day money-back guarantee if you're not satisfied with our services. After that period, refunds are considered on a case-by-case basis.\"\n            }, {\n              question: 'How do I track the performance of my ads?',\n              answer: 'All plans include access to our analytics dashboard where you can track impressions, clicks, and conversions in real-time.'\n            }].map((faq, index) => (\n              <div key={index} className=\"bg-white p-6 rounded-lg shadow-sm\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-2\">\n                  {faq.question}\n                </h3>\n                <p className=\"text-gray-600\">{faq.answer}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* CTA Section */}\n      <div className=\"bg-orange-600 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Ready to boost your visibility?\n          </h2>\n          <p className=\"text-xl mb-8 max-w-3xl mx-auto\">\n            Join hundreds of local businesses who've increased their audience with our advertising solutions\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n            <button \n              className=\"px-8 py-3 bg-white text-orange-600 font-medium rounded-md shadow-sm hover:bg-orange-50\" \n              onClick={() => navigate('/checkout/details?plan=professional-advertising')}\n            >\n              Get Started Now\n            </button>\n            <button \n              className=\"px-8 py-3 bg-orange-700 text-white font-medium rounded-md shadow-sm border border-orange-500 hover:bg-orange-800\" \n              onClick={() => navigate('/advertise/contact')}\n            >\n              Contact Sales\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/privacy-policy.tsx",
      {
        "filePath": "app/routes/marketing/privacy-policy.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/+types/privacy-policy'",
            "importPath": "~/types/app/routes/marketing/+types/privacy-policy"
          }
        ],
        "content": "import { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/+types/privacy-policy';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async function ({ request }: Route.LoaderArgs) {\n  const { t } = await createI18nServerInstance(request);\n\n  return {\n    title: t('marketing:privacyPolicy'),\n    subtitle: t('marketing:privacyPolicyDescription'),\n  };\n};\n\nexport default function PrivacyPolicyPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <div>\n      <SitePageHeader title={data.title} subtitle={data.subtitle} />\n\n      <div className={'container mx-auto py-8'}>\n        <div>Your terms of service content here</div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "marketing/terms-of-service.tsx",
      {
        "filePath": "app/routes/marketing/terms-of-service.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/marketing/+types/terms-of-service'",
            "importPath": "~/types/app/routes/marketing/+types/terms-of-service"
          }
        ],
        "content": "import { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/+types/terms-of-service';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async function ({ request }: Route.LoaderArgs) {\n  const { t } = await createI18nServerInstance(request);\n\n  return {\n    title: t('marketing:termsOfService'),\n    subtitle: t('marketing:termsOfServiceDescription'),\n  };\n};\n\nexport default function TermsAndConditionsPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <div>\n      <SitePageHeader title={data.title} subtitle={data.subtitle} />\n\n      <div className={'container mx-auto py-8'}>\n        <div>Your content here</div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    [
      "messages/index.tsx",
      {
        "filePath": "app/routes/messages/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { MessagesPage } from '~/components/magic-patterns/pages/social/MessagesPage'",
            "importPath": "~/components/magic-patterns/pages/social/MessagesPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/messages/+types'",
            "importPath": "~/types/app/routes/messages/+types"
          }
        ],
        "content": "import { MessagesPage } from '~/components/magic-patterns/pages/social/MessagesPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/messages/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Messages - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function MessagesRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <MessagesPage />;\n}\n"
      }
    ],
    [
      "notifications/index.tsx",
      {
        "filePath": "app/routes/notifications/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { NotificationsPage } from '~/components/magic-patterns/pages/social/NotificationsPage'",
            "importPath": "~/components/magic-patterns/pages/social/NotificationsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/notifications/+types'",
            "importPath": "~/types/app/routes/notifications/+types"
          }
        ],
        "content": "import { NotificationsPage } from '~/components/magic-patterns/pages/social/NotificationsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/notifications/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Notifications - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function NotificationsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <NotificationsPage />;\n}\n"
      }
    ],
    [
      "partner/index.tsx",
      {
        "filePath": "app/routes/partner/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { PartnerWithUsPage } from '~/components/magic-patterns/pages/PartnerWithUsPage'",
            "importPath": "~/components/magic-patterns/pages/PartnerWithUsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/partner/+types'",
            "importPath": "~/types/app/routes/partner/+types"
          }
        ],
        "content": "import { PartnerWithUsPage } from '~/components/magic-patterns/pages/PartnerWithUsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/partner/+types';\nimport { redirect } from 'react-router';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'PartnerWithUs - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\n\nexport const action = async ({ request }: Route.ActionArgs) => {\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n  \n  // TODO: Implement form processing logic\n  \n  return { success: true };\n};\n\nexport default function PartnerWithUsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <PartnerWithUsPage />;\n}\n"
      }
    ],
    [
      "performers.$id.tsx",
      {
        "filePath": "app/routes/performers.$id.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { PerformerProfilePage } from '~/components/magic-patterns/pages/performers/PerformerProfilePage'",
            "importPath": "~/components/magic-patterns/pages/performers/PerformerProfilePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/performers/$id/+types'",
            "importPath": "~/types/app/routes/performers/$id/+types"
          }
        ],
        "content": "import { PerformerProfilePage } from '~/components/magic-patterns/pages/performers/PerformerProfilePage';\nimport type { Route } from '~/types/app/routes/performers/$id/+types';\n\nexport const loader = async ({ params }: Route.LoaderArgs) => {\n  return {\n    performerId: params.id,\n    title: `Performer Profile - GoEventCity`,\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'View detailed information about this performer',\n    },\n  ];\n};\n\nexport default function PerformerProfileRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <PerformerProfilePage performerId={data.performerId} />;\n}"
      }
    ],
    [
      "performers.tsx",
      {
        "filePath": "app/routes/performers.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { PerformersPage } from '~/components/magic-patterns/pages/PerformersPage'",
            "importPath": "~/components/magic-patterns/pages/PerformersPage"
          }
        ],
        "typeImports": [],
        "content": "import { PerformersPage } from '~/components/magic-patterns/pages/PerformersPage';\n\nexport default function PerformersRoute() {\n  return <PerformersPage />;\n}"
      }
    ],
    [
      "press/index.tsx",
      {
        "filePath": "app/routes/press/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { PressMediaPage } from '~/components/magic-patterns/pages/PressMediaPage'",
            "importPath": "~/components/magic-patterns/pages/PressMediaPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/press/+types'",
            "importPath": "~/types/app/routes/press/+types"
          }
        ],
        "content": "import { PressMediaPage } from '~/components/magic-patterns/pages/PressMediaPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/press/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'PressMedia - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function PressMediaRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <PressMediaPage />;\n}\n"
      }
    ],
    [
      "social/messages.tsx",
      {
        "filePath": "app/routes/social/messages.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/social/messages/+types'",
            "importPath": "~/types/app/routes/social/messages/+types"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/social/messages/+types';;\n\nexport default function MessagesRoute() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">Messages</h1>\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <p className=\"text-gray-500\">Your messages will appear here.</p>\n        </div>\n      </div>\n    </div>\n  );\n}"
      }
    ],
    [
      "social/notifications.tsx",
      {
        "filePath": "app/routes/social/notifications.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/social/notifications/+types'",
            "importPath": "~/types/app/routes/social/notifications/+types"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/social/notifications/+types';;\n\nexport default function NotificationsRoute() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">Notifications</h1>\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <p className=\"text-gray-500\">Your notifications will appear here.</p>\n        </div>\n      </div>\n    </div>\n  );\n}"
      }
    ],
    [
      "social.tsx",
      {
        "filePath": "app/routes/social.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import SocialFeedPage from '~/components/magic-patterns/pages/social/SocialFeedPage'",
            "importPath": "~/components/magic-patterns/pages/social/SocialFeedPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types/social'",
            "importPath": "~/types/app/routes/+types/social"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/+types/social';;\n\nimport SocialFeedPage from '~/components/magic-patterns/pages/social/SocialFeedPage';\n\nexport default function SocialRoute() {\n  return <SocialFeedPage />;\n}"
      }
    ],
    [
      "success-stories/index.tsx",
      {
        "filePath": "app/routes/success-stories/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { SuccessStoriesPage } from '~/components/magic-patterns/pages/SuccessStoriesPage'",
            "importPath": "~/components/magic-patterns/pages/SuccessStoriesPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/success-stories/+types'",
            "importPath": "~/types/app/routes/success-stories/+types"
          }
        ],
        "content": "import { SuccessStoriesPage } from '~/components/magic-patterns/pages/SuccessStoriesPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/success-stories/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'SuccessStories - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function SuccessStoriesRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <SuccessStoriesPage />;\n}\n"
      }
    ],
    [
      "test-magic-ssr.tsx",
      {
        "filePath": "app/routes/test-magic-ssr.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { HomePage } from '~/components/magic-patterns/pages/HomePage'",
            "importPath": "~/components/magic-patterns/pages/HomePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from './+types/test-magic-ssr'",
            "importPath": "./+types/test-magic-ssr"
          }
        ],
        "content": "import type { Route } from './+types/test-magic-ssr';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { HomePage } from '~/components/magic-patterns/pages/HomePage';\n\n// SSR-safe loader following Makerkit pattern\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const client = getSupabaseServerClient(request);\n  \n  // Future: Fetch real data from Supabase\n  // const { data: events } = await client.from('events').select('*');\n  \n  return {\n    title: 'Go Event City - Find Amazing Events',\n    description: 'Discover and book tickets for concerts, sports, theater, and more in your city',\n    // Mock data for now\n    featuredEvents: [\n      { id: 1, name: 'Sample Event', date: '2024-12-15' }\n    ]\n  };\n};\n\n// Meta function for SEO\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    { title: data?.title || 'Go Event City' },\n    { name: 'description', content: data?.description || 'Find events near you' }\n  ];\n};\n\n// Component using props.loaderData pattern (SSR-safe)\nexport default function TestMagicSSR(props: Route.ComponentProps) {\n  // SSR-safe: Using props.loaderData instead of useLoaderData() hook\n  const { featuredEvents } = props.loaderData;\n  \n  // Pass data to Magic Patterns component if needed\n  // For now, HomePage uses its own mock data\n  return <HomePage />;\n}"
      }
    ],
    [
      "tickets/$id/index.tsx",
      {
        "filePath": "app/routes/tickets/$id/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { TicketDetailPage } from '~/components/magic-patterns/pages/tickets/TicketDetailPage'",
            "importPath": "~/components/magic-patterns/pages/tickets/TicketDetailPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/tickets/$id/+types'",
            "importPath": "~/types/app/routes/tickets/$id/+types"
          }
        ],
        "content": "import { TicketDetailPage } from '~/components/magic-patterns/pages/tickets/TicketDetailPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/tickets/$id/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'TicketDetail - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function TicketDetailRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <TicketDetailPage />;\n}\n"
      }
    ],
    [
      "tickets/buy.tsx",
      {
        "filePath": "app/routes/tickets/buy.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/tickets/buy/+types'",
            "importPath": "~/types/app/routes/tickets/buy/+types"
          }
        ],
        "content": "import type { Route } from '~/types/app/routes/tickets/buy/+types';;\n\nexport default function TicketBuyRoute() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">Buy Tickets</h1>\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <p className=\"text-gray-500\">Browse and buy event tickets here.</p>\n        </div>\n      </div>\n    </div>\n  );\n}"
      }
    ],
    [
      "tickets/index.tsx",
      {
        "filePath": "app/routes/tickets/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { TicketsPage } from '~/components/magic-patterns/pages/TicketsPage'",
            "importPath": "~/components/magic-patterns/pages/TicketsPage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/tickets/+types'",
            "importPath": "~/types/app/routes/tickets/+types"
          }
        ],
        "content": "import { TicketsPage } from '~/components/magic-patterns/pages/TicketsPage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/tickets/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'Tickets - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function TicketsRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <TicketsPage />;\n}\n"
      }
    ],
    [
      "tickets/marketplace/index.tsx",
      {
        "filePath": "app/routes/tickets/marketplace/index.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { TicketMarketplacePage } from '~/components/magic-patterns/pages/tickets/TicketMarketplacePage'",
            "importPath": "~/components/magic-patterns/pages/tickets/TicketMarketplacePage"
          }
        ],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/tickets/marketplace/+types'",
            "importPath": "~/types/app/routes/tickets/marketplace/+types"
          }
        ],
        "content": "import { TicketMarketplacePage } from '~/components/magic-patterns/pages/tickets/TicketMarketplacePage';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport type { Route } from '~/types/app/routes/tickets/marketplace/+types';\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  // Future: Add data fetching logic here\n  return {\n    title: 'TicketMarketplace - GoEventCity',\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title || 'GoEventCity',\n    },\n    {\n      name: 'description',\n      content: 'Discover amazing events and experiences in your city',\n    },\n  ];\n};\n\n// SSR-safe pattern using props.loaderData\nexport default function TicketMarketplaceRoute(props: Route.ComponentProps) {\n  const data = props.loaderData;\n  \n  return <TicketMarketplacePage />;\n}\n"
      }
    ],
    [
      "update-password.tsx",
      {
        "filePath": "app/routes/update-password.tsx",
        "magicPatternsImports": [],
        "typeImports": [
          {
            "fullImport": "import type { Route } from '~/types/app/routes/+types/update-password'",
            "importPath": "~/types/app/routes/+types/update-password"
          }
        ],
        "content": "import { UpdatePasswordForm } from '@kit/auth/password-reset';\nimport { AuthLayoutShell } from '@kit/auth/shared';\n\nimport { AppLogo } from '~/components/app-logo';\nimport pathsConfig from '~/config/paths.config';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport type { Route } from '~/types/app/routes/+types/update-password';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const { t } = await createI18nServerInstance(args.request);\n\n  return {\n    title: t('auth:updatePassword'),\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nconst Logo = () => <AppLogo href={''} />;\n\nexport default function UpdatePasswordPage() {\n  return (\n    <AuthLayoutShell Logo={Logo}>\n      <UpdatePasswordForm redirectTo={pathsConfig.app.home} />\n    </AuthLayoutShell>\n  );\n}\n"
      }
    ],
    [
      "venues.$id.tsx",
      {
        "filePath": "app/routes/venues.$id.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { VenueDetailPage } from '~/components/magic-patterns/pages/venues/VenueDetailPage'",
            "importPath": "~/components/magic-patterns/pages/venues/VenueDetailPage"
          }
        ],
        "typeImports": [],
        "content": "import { useParams } from 'react-router';\nimport { VenueDetailPage } from '~/components/magic-patterns/pages/venues/VenueDetailPage';\n\nexport default function VenueDetailRoute() {\n  const params = useParams();\n  // TODO: Pass the venue ID to the component once it accepts props\n  return <VenueDetailPage />;\n}"
      }
    ],
    [
      "venues.tsx",
      {
        "filePath": "app/routes/venues.tsx",
        "magicPatternsImports": [
          {
            "fullImport": "import { VenuesPage } from '~/components/magic-patterns/pages/VenuesPage'",
            "importPath": "~/components/magic-patterns/pages/VenuesPage"
          }
        ],
        "typeImports": [],
        "content": "import { VenuesPage } from '~/components/magic-patterns/pages/VenuesPage';\n\nexport default function VenuesRoute() {\n  return <VenuesPage />;\n}"
      }
    ]
  ]
}